<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linux Sysadmin</title><link href="http://www.linuxsysadmin.tk/" rel="alternate"></link><link href="http://www.linuxsysadmin.tk/feeds/operaciones.atom.xml" rel="self"></link><id>http://www.linuxsysadmin.tk/</id><updated>2016-08-22T10:00:00+02:00</updated><entry><title>Generando passwords complejas con python</title><link href="http://www.linuxsysadmin.tk/2016/08/generando-passwords-complejas-con-python.html" rel="alternate"></link><published>2016-08-22T10:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-08-22:2016/08/generando-passwords-complejas-con-python.html</id><summary type="html">&lt;p&gt;Todos hemos trabajado en empresas que tienen curiosas políticas de seguridad. La cosa es mas cierta en la generación de &lt;em&gt;passwords&lt;/em&gt;, cuando te piden mayúsculas, minúsculas, dígitos y otros símbolos arcanos. Cuando los administradores tenemos que asignarlas a miles, ya no es divertido y tenemos que generarlas de forma automática.&lt;/p&gt;
&lt;p&gt;Así pues, y harto de hacerlo, hice un &lt;em&gt;script&lt;/em&gt; con &lt;strong&gt;python&lt;/strong&gt; que me asegure que se cumple con todas las restricciones reinantes.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos que generar &lt;em&gt;passwords&lt;/em&gt; de 12 caracteres, con al menos una mayúscula, una minúscula, un dígito y un otro símbolo.&lt;/p&gt;
&lt;p&gt;El truco es simple: vamos a poner un carácter de cada tipo de los requeridos, y el resto los vamos a poner del alfabeto completo. Luego solo hay que desordenar el conjunto. Para ello, hay algunas cosas que hay que saber en &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos métodos para desordenar &lt;em&gt;arrays&lt;/em&gt;, pero no &lt;em&gt;strings&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Disponemos de un método para elegir un elemento de un &lt;em&gt;array&lt;/em&gt; o un carácter de un &lt;em&gt;string&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Podemos juntar un &lt;em&gt;array&lt;/em&gt; en un &lt;em&gt;string&lt;/em&gt;, mediante un separador, posiblemente vacío.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, vamos a declarar el alfabeto como &lt;em&gt;strings&lt;/em&gt;, la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;array&lt;/em&gt; de caracteres y finalmente vamos a sacar la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;string&lt;/em&gt;, juntando los caracteres sin un separador.&lt;/p&gt;
&lt;p&gt;Crearemos un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;password.py&lt;/em&gt;, con el siguiente contenido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

&lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0123456789&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-+_.,:;()&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;all_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_chars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras darle permisos de ejecución, solo nos queda generar &lt;em&gt;passwords&lt;/em&gt; hasta que quedemos satisfechos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ./password.py 
pyLq:4CmfU2+
gerard@sirius:~$ ./password.py 
&lt;span class="o"&gt;(&lt;/span&gt;_vM7ag5mobU
gerard@sirius:~$ ./password.py 
4OKDa+afcEm4
gerard@sirius:~$ ./password.py 
w_.T8QjnB4UD
gerard@sirius:~$ ./password.py 
8VxHFb+.9z5e
gerard@sirius:~$ ./password.py 
vl6bSctxHd+c
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;</summary><category term="password"></category><category term="python"></category><category term="seguridad"></category></entry><entry><title>Encriptando datos sensibles con Ansible</title><link href="http://www.linuxsysadmin.tk/2016/08/encriptando-datos-sensibles-con-ansible.html" rel="alternate"></link><published>2016-08-15T10:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-08-15:2016/08/encriptando-datos-sensibles-con-ansible.html</id><summary type="html">&lt;p&gt;Si usamos &lt;strong&gt;ansible&lt;/strong&gt; para configurar otras máquinas tenemos pleno poder para acceder a otras, sea mediante claves SSH o por accesos remotos normales. En este último caso, conviene aplicar un poco de seguridad para evitar que un posible intruso acceda libremente. Para esto podemos encriptar la información sensible con &lt;strong&gt;ansible-vault&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para hacer una demostración simple, vamos a partir de &lt;a href="http://www.linuxsysadmin.tk/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;un artículo anterior&lt;/a&gt;, por comodidad. En este artículo pusimos todos los datos de conexión a las máquinas controladas en el fichero de inventario &lt;em&gt;hosts&lt;/em&gt;, que hoy vamos a trocear y a encriptar las partes sensibles.&lt;/p&gt;
&lt;p&gt;Partimos de un modelo en el que un &lt;strong&gt;master&lt;/strong&gt; con las herramientas de &lt;strong&gt;ansible&lt;/strong&gt; controla s un grupo de &lt;strong&gt;slaves&lt;/strong&gt;, que solo ofrecen acceso SSH. El uso de &lt;strong&gt;docker&lt;/strong&gt; es opcional, pero muy conveniente por la rapidez en montar el entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker ps
CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES
c2de340b9dac        master              &lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;             &lt;span class="m"&gt;17&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;16&lt;/span&gt; seconds                           ansible
e6f0d2569207        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;16&lt;/span&gt; minutes                           slave2
497357df848c        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;17&lt;/span&gt; minutes                           slave1
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo el tutorial se va a hacer desde la máquina &lt;strong&gt;master&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Estado inicial&lt;/h2&gt;
&lt;p&gt;Siguiendo el artículo mencionado, disponemos de un fichero de inventario &lt;em&gt;hosts&lt;/em&gt; que declara todos los servidores y grupos que tenemos, conjuntamente con sus datos de conexión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que funciona como debe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i hosts -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Separando el inventario en dos partes&lt;/h2&gt;
&lt;p&gt;Como solo queremos encriptar los datos de conexión, vamos a partir el inventario en dos ficheros, dentro de su carpeta. &lt;strong&gt;ansible&lt;/strong&gt; va a recibir esa carpeta como inventario y va a juntar ambas partes para sacar la visión global.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# tree inventory/&lt;/span&gt;
inventory/
├── hosts
└── vault

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es tener una parte visible con los grupos y los servidores que los componen, y otra parte secreta con los datos a ocultar. Así quedaría la partición:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras indicar a &lt;strong&gt;ansible&lt;/strong&gt; que queremos utilizar esta nueva carpeta como inventario, vemos que sigue funcionando de manera adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Encriptando el fichero secreto&lt;/h2&gt;
&lt;p&gt;Para conseguir esto, se va a utilizar el comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, al que se le pide que encripte el fichero secreto. Es una encriptación simétrica que encripta y desencripta con la misma contraseña.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-vault encrypt inventory/vault &lt;/span&gt;
New Vault password: 
Confirm New Vault password: 
Encryption successful
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el fichero ha quedado modificado, de forma que ya ni se puede curiosear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;1.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
37306639633165383030626335356261333436646539373962623937653137666430366330313663
3666396533313031633236383964323235376262386337360a303037366336666135363266616363
63656431623363343639663331613262643032393034623337383134306635313235623463316466
3161613332306136310a663261346565386634663938656136363939653061373035346332616164
62353865313265306132366166653263623964306536633163393764306166366236666362323165
39353835346263646134383037386465656131356130376165646331623438336336363462383066
34353062396364393239333563336466653637343030326262323338313065623864393131343165
35313134666566663636636237376563316436666437316632613630396565643539623661323436
30383261333230613130666465626137656463326238626163656465316632303638373334623137
61653537396535346266623462396165333731326462646534343833346165333034613037663033
64613763363635333030393464646139373339333436343861313462666537636461303238326433
30346333303336643663623563613465393661626565636630383931643863343430613335373234
3336
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando usemos fichero encriptados, &lt;strong&gt;ansible&lt;/strong&gt; es capaz de desencriptarlos según se necesite. Solo hace falta indicarle la forma en la que queremos darle la contraseña, por ejemplo, por el terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --ask-vault-pass&lt;/span&gt;
Vault password: 
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otra forma, menos segura pero mas conveniente, es tener la contraseña en un fichero, y dejar que &lt;strong&gt;ansible&lt;/strong&gt; la lea de ese fichero. Esto es útil especialmente en &lt;em&gt;scripts&lt;/em&gt;, en donde suministrar una contraseña por el terminal no es factible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .vault-passfile &lt;/span&gt;
supersecret
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --vault-password-file=.vault-passfile&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que solo se puede indicar una contraseña para nuestros &lt;em&gt;vaults&lt;/em&gt;, sea por el terminal o por un fichero. Eso significa que todas las contraseñas usadas en un mismo comando deben ser las mismas.&lt;/p&gt;
&lt;h2&gt;Limpiando nuestras líneas de comandos&lt;/h2&gt;
&lt;p&gt;si el fichero de la &lt;em&gt;password&lt;/em&gt; es siempre el mismo, nuestros comandos van a ser largos y repetitivos. La gracia es que podemos ocultar los parámetros permanentes en el fichero de configuración de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .ansible.cfg &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;vault_password_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .vault-passfile
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, podemos omitirlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, este parámetro también afecta a otras herramientas, como por ejemplo el mismo comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, por ejemplo, para inspeccionar el fichero encriptado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;1.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
30313636313462346536346262333462633131633666653238313239333330343036346263653962
3862623363393436656334636361303263336333363431610a346666653539643065383765613466
64626437633565323866316466636166623432313630323362393961383663356233626263386530
3539353266343237310a396536326337313232663466333361316666376364323634623638353865
66323636336137303863643736636666353631613230633231386434373266343764343730653238
38643462636330663864626237366631346439303739323030306336396266366666303262363735
30303034333532336532306432643265653963646132393939386561326539646566613961393963
62363633626135376532336137373631383839393231356265653932333639343762353937356439
64346465323263623830306436636134613561646232663664306262383136646265383834306336
62646537666135393032306338313166316631303134363363633833663862663933366436613461
35343039646430393235383238653733343465653863363835303537383437613933306137636161
37643432373531613565633431636461666661343561393764376239313637663362333136363237
3131
~ &lt;span class="c1"&gt;# ansible-vault view inventory/vault&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, también sirve para encriptar, de forma que si lo hubiésemos puesto al principio, ni siquiera tendríamos que usarla para esa función. Para ir mas lejos, podríamos haber generado la &lt;em&gt;password&lt;/em&gt; de forma aleatorio y/o automatizada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
lorem ipsum
~ &lt;span class="c1"&gt;# ansible-vault encrypt aaaa &lt;/span&gt;
Encryption successful
~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;1.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
38666531306261623531363836623436333061326536323066386139643630323336336565626663
6238383334333666376338363366353066333763393330340a353365343234646430393236356464
62346166356430346564343539313436346661656335343733623836663563633630346138636661
3838633536383934360a343232306237373864616237386164376136323737373739623062306562
3964
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos quedan los ficheros sensibles un poco mas protegidos, aunque no tenemos porque encriptarlos todos.&lt;/p&gt;</summary><category term="ansible"></category><category term="vault"></category><category term="encriptación"></category><category term="inventario"></category></entry><entry><title>Tipos de volúmenes en Docker</title><link href="http://www.linuxsysadmin.tk/2016/07/tipos-de-volumenes-en-docker.html" rel="alternate"></link><published>2016-07-18T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-07-18:2016/07/tipos-de-volumenes-en-docker.html</id><summary type="html">&lt;p&gt;Una de las mas importantes funcionalidades de &lt;strong&gt;Docker&lt;/strong&gt; son los volúmenes. Estos no son mas que carpetas en nuestro sistema de ficheros y son capaces de sobrevivir al ciclo de vida normal del contenedor. Eso nos permite, entre otras cosas, compartir varios ficheros con otros contenedores o con el &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Los volúmenes son bastante útiles porque permiten compartirse entre contenedores, o el propio &lt;em&gt;host&lt;/em&gt;. Eso nos permite consultar todos los &lt;em&gt;logs&lt;/em&gt; cómodamente desde un contenedor dedicado, hacer &lt;em&gt;backups&lt;/em&gt; de un contenedor desde otro dedicado, o recuperar esos mismo &lt;em&gt;backups&lt;/em&gt; hacia nuestro &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, he visto contenedores con la única función de producir ficheros (&lt;em&gt;.tar.gz&lt;/em&gt;, &lt;em&gt;.deb&lt;/em&gt;, ...) en volúmenes que luego son consumidos por servicios de &lt;em&gt;runtime&lt;/em&gt;, por ejemplo un servidor web, un repositorio o simplemente un NFS.&lt;/p&gt;
&lt;p&gt;Los volúmenes pueden ser de 3 tipos distintos, y se categorizan según esta lista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data volumes&lt;ul&gt;
&lt;li&gt;Anonymous data volumes&lt;/li&gt;
&lt;li&gt;Named data volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mounted volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data volumes&lt;/h2&gt;
&lt;p&gt;Se trata de carpetas que se crean en &lt;em&gt;/var/lib/docker/&lt;/em&gt; y que pueden compartirse entre diferentes contenedores.&lt;/p&gt;
&lt;h3&gt;Anonymous data volumes&lt;/h3&gt;
&lt;p&gt;Se crean cuando se levanta un contenedor, mediante el comando &lt;em&gt;docker run&lt;/em&gt;, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm -v /data alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos crea un volumen asociado al contenedor creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
root@sirius:~# tree /var/lib/docker/volumes/
/var/lib/docker/volumes/
├── 1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
│   └── _data
└── metadata.db

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
root@sirius:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A su vez, otro contenedor puede montar los volúmenes de otro contenedor, ya sea porque los creó o porque los ha montado de un tercero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker run -ti --rm --volumes-from adoring_lovelace alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora mismo, la carpeta &lt;em&gt;/data/&lt;/em&gt; pertenece al primer contendor, pero es la misma para ambos contenedores.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; mantiene una cuenta de los contenedores que están usando un volumen, y estos solo se eliminan cuando el último contenedor que lo usa sale con el parámetro &lt;em&gt;--rm&lt;/em&gt; o si se hace un &lt;em&gt;docker rm -v&lt;/em&gt;. En cualquier otro caso, el volumen se queda parasitando, hasta que lo eliminamos manualmente usado &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Named data volumes&lt;/h3&gt;
&lt;p&gt;Estos volúmenes no dependen de ningún contenedor concreto, y se pueden montar en cualquier contenedor. Se crean específicamente usando el comando &lt;em&gt;docker volume create&lt;/em&gt;, o al ejecutar un contenedor si le damos un nombre en la línea de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume create --name vol1
vol1
gerard@sirius:~$ docker run -ti --rm -v vol2:/data alpine:3.4 &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estos volúmenes no se eliminan por si solos nunca y persisten cuando su contenedor desaparece. Para eliminarlos se necesita una intervención manual mediante el comando &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ docker volume rm vol1 vol2
vol1
vol2
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Mounted volumes&lt;/h2&gt;
&lt;p&gt;Otras veces nos interesa montar ficheros o carpetas desde la máquina &lt;em&gt;host&lt;/em&gt;. En este caso, podemos montar la carpeta o el fichero especificando la ruta completa desde la máquina &lt;em&gt;host&lt;/em&gt;, y la ruta completa en el contenedor. Es posible también especificar si el volumen es de lectura y escritura (por defecto) o de solo lectura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker$ docker run -ti --rm -v /etc/hostname:/root/parent_name:ro -v /opt/:/data alpine:3.4 sh
/ &lt;span class="c1"&gt;# cat /root/parent_name &lt;/span&gt;
sirius
/ &lt;span class="c1"&gt;# ls /data/&lt;/span&gt;
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este último caso es ideal para recuperar &lt;em&gt;backups&lt;/em&gt; o ficheros generados en un contenedor, en vistas a su utilización futura por parte de otros contenedores o del mismo &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;</summary><category term="docker"></category><category term="volumenes"></category></entry><entry><title>Dirección IP compartida manualmente entre servidores</title><link href="http://www.linuxsysadmin.tk/2016/07/direccion-ip-compartida-manualmente-entre-servidores.html" rel="alternate"></link><published>2016-07-11T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-07-11:2016/07/direccion-ip-compartida-manualmente-entre-servidores.html</id><summary type="html">&lt;p&gt;Cuando hablamos de alta disponibilidad, uno de los métodos mas utilizados es el &lt;strong&gt;failover&lt;/strong&gt;. La idea es que una de las máquinas es la que asume la totalidad del servicio, y el resto están preparadas para ejercer la misma función en el caso de que la primera deje de funcionar.&lt;/p&gt;
&lt;p&gt;En este campo hay varias soluciones como &lt;strong&gt;keepalived&lt;/strong&gt; y &lt;strong&gt;pacemaker&lt;/strong&gt;, pero en este artículo se pretende mostrar los conceptos mas básicos; haciendo manualmente los pasos y entendiendo como funciona todo, desde un punto de vista didáctico.&lt;/p&gt;
&lt;p&gt;Realmente esto es un intento mío para hacer una solución de alta disponibilidad, pero se quedó a medias. Lo escribo porque creo que puede ser útil en otro momento.&lt;/p&gt;
&lt;h2&gt;Punto de partida&lt;/h2&gt;
&lt;p&gt;Tenemos dos servidores normales, que vamos a convertir en un &lt;strong&gt;cluster&lt;/strong&gt; con configuración manual de &lt;strong&gt;failover&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4      IPV6  AUTOSTART
-------------------------------------------
server1  RUNNING  10.0.0.3  -     NO
server2  RUNNING  10.0.0.4  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digamos que queremos dar un servicio web, aunque podríamos hacer de balanceadores, servidores de aplicación o lo que se necesite, en general.&lt;/p&gt;
&lt;p&gt;Vamos a poner un servidor web &lt;strong&gt;nginx&lt;/strong&gt;, que sirva una página HTML que nos indique la máquina que recibe las peticiones, a modo de comprobación.&lt;/p&gt;
&lt;p&gt;Vamos a instalar el servicio &lt;strong&gt;nginx&lt;/strong&gt; en ambas máquinas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y nginx-light
...  
root@server1:~#

root@server2:~# apt-get install -y nginx-light
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una página HTML con el nombre de cada máquina para ver quien recibe la petición HTTP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# hostname &amp;gt; /var/www/html/index.html
root@server1:~#

root@server2:~# hostname &amp;gt; /var/www/html/index.html
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y comprobamos que podemos diferenciar el servidor destino que recibe cada una de las peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.3/
server1
root@lxc:~# wget -qO- http://10.0.0.4/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Moviendo la dirección IP compartida&lt;/h2&gt;
&lt;p&gt;Además de la dirección IP de cada máquina, vamos a tener una que represente al miembro activo del &lt;strong&gt;cluster&lt;/strong&gt;, que por ejemplo, será la 10.0.0.2&lt;/p&gt;
&lt;p&gt;Si solo una de las máquinas tiene esa dirección IP asignada, el truco ya está hecho. Sin embargo, ¿que pasará si los dos nodos tienen la dirección IP compartida asignada? Puede pasará cualquier cosa.&lt;/p&gt;
&lt;p&gt;Para evitar este caso, un nodo que asuma el rol de primario también va a forzar a sus vecinos a actualizar sus tablas ARP, consiguiendo así &lt;strong&gt;robar&lt;/strong&gt; la dirección IP. Esto se puede conseguir con el comando &lt;strong&gt;arping&lt;/strong&gt; y por lo tanto, hay que instalarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y iputils-arping
...  
root@server1:~#

root@server2:~# apt-get install -y iputils-arping
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Promocionando server1 a primario&lt;/h3&gt;
&lt;p&gt;El proceso de &lt;strong&gt;failover&lt;/strong&gt; consiste en agenciarse la dirección compartida. Para ello, tenemos que añadir una nueva dirección IP en nuestra interfaz de red. Como es posible que esta IP pertenezca a otro servidor, hay que lanzar el comando &lt;strong&gt;arping&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# ip addr add 10.0.0.2/24 dev eth0
root@server1:~# arping -U -c1 10.0.0.2
ARPING 10.0.0.2 from 10.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso, aunque opcional, es educado; el servidor desplazado de primario a reserva, no necesita tener esa dirección asignada, en caso de que la tuviera (que no es el caso, pero no importa y lo ignoramos).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr del 10.0.0.2/24 dev eth0
RTNETLINK answers: Cannot assign requested address
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es que &lt;em&gt;server1&lt;/em&gt; tiene dos direcciones asignadas: la suya propia y la compartida, mientras que &lt;em&gt;server2&lt;/em&gt; solo tiene la suya.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  10.0.0.2, 10.0.0.3  -     NO
server2  RUNNING  10.0.0.4            -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestras peticiones web, caen efectivamente en &lt;em&gt;server1&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2/
server1
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cambiando el primario de server1 a server2&lt;/h3&gt;
&lt;p&gt;El proceso es el mismo, pero al revés: &lt;em&gt;server2&lt;/em&gt; reclama la dirección compartida y &lt;em&gt;server1&lt;/em&gt; se deshace de ella por cortesía.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr add 10.0.0.2/24 dev eth0
root@server2:~# arping -U -c1 10.0.0.2
ARPING 10.0.0.2 from 10.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server2:~#

root@server1:~# ip addr del 10.0.0.2/24 dev eth0
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuevamente, podemos ver donde está la dirección compartida y en que servidor caen nuestras peticiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  10.0.0.3            -     NO
server2  RUNNING  10.0.0.2, 10.0.0.4  -     NO
root@lxc:~#

root@lxc:~# wget -qO- http://10.0.0.2/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usos poco éticos de esta técnica&lt;/h2&gt;
&lt;p&gt;Estamos en nuestra oficina y no queremos trabajar, con la excusa de que no hay internet. ¿Que nos impide asignarnos la dirección del &lt;em&gt;router&lt;/em&gt; a nuestra máquina? Esto haría que toda la oficina usara nuestra máquina de &lt;em&gt;gateway&lt;/em&gt;, que por supuesto, no sabe salir a internet, cortando efectivamente el tráfico exterior.&lt;/p&gt;
&lt;p&gt;Parece que esta idea ya se les ocurrió a los fabricantes de &lt;em&gt;routers&lt;/em&gt;, así que sus productos ya se preocupan de ir reclamando su dirección IP. Así que os puede funcionar puntualmente, y si queréis hacer la broma por un periodo largo, tendréis que librar una batalla de &lt;em&gt;arpings&lt;/em&gt; contra el &lt;em&gt;router&lt;/em&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="failover"></category><category term="arping"></category></entry><entry><title>Un root shell en C</title><link href="http://www.linuxsysadmin.tk/2016/06/un-root-shell-en-c.html" rel="alternate"></link><published>2016-06-13T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-06-13:2016/06/un-root-shell-en-c.html</id><summary type="html">&lt;p&gt;Cuando operamos un servidor de producción es habitual que no tengamos acceso habitual al usuario &lt;em&gt;root&lt;/em&gt;, e incluso lo tengan altamente vigilado. Podemos intentar dejar una puerta trasera, por ejemplo poniendo un binario con el &lt;em&gt;setuid&lt;/em&gt; bit activado, te pueden pillar. Sin embargo es posible dejar una puerta abierta oculta.&lt;/p&gt;
&lt;p&gt;El truco esta en las &lt;em&gt;linux capabilities&lt;/em&gt;, que nos permiten dar permisos para operaciones concretas a binarios concretos; así pues, no es necesario ejecutar el binario con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El resto es tan fácil como hacer un binario que escale a &lt;em&gt;root&lt;/em&gt; y luego ejecute lo que necesitamos, por ejemplo, una línea de comandos &lt;strong&gt;bash&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Aquí ponemos el código fuente necesario para hacer lo que pretendemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat root_shell.c
int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    setuid&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación no tiene ningún misterio; lo compilamos con &lt;strong&gt;gcc&lt;/strong&gt; y le pasamos un &lt;strong&gt;strip&lt;/strong&gt; para reducir el tamaño al máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ gcc -o root_shell root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ strip root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si tratamos de ejecutarlo, veremos que la llamada para escalar a &lt;em&gt;root&lt;/em&gt; ha sido ignorada; el usuario que hemos usado no tiene permisos para hacer eso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a darle la &lt;em&gt;capability&lt;/em&gt; &lt;strong&gt;CAP_SETUID&lt;/strong&gt;. Además, le pondremos los flags &lt;em&gt;effective&lt;/em&gt; y &lt;em&gt;permitted&lt;/em&gt;, que darán la &lt;em&gt;capability&lt;/em&gt; automáticamente y lo pasará a los procesos hijos. Mas información en &lt;a href="http://linux.die.net/man/7/capabilities"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: he usado &lt;strong&gt;sudo&lt;/strong&gt; para hacer esta operación, pero como no tendremos esto en producción, tendremos que esperar una intervención en donde nos concedan ese permiso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ sudo setcap cap_setuid+ep root_shell
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutando el binario, vemos que hemos obtenido lo que esperábamos; un binario que nos deja ante una línea de comandos con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que no hay permisos especiales tipo &lt;em&gt;setuid&lt;/em&gt;, con lo que no pueden encontrarlo con el &lt;strong&gt;find&lt;/strong&gt; habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh
total 12K
-rwxrwxr-x. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 4.3K Mar &lt;span class="m"&gt;31&lt;/span&gt; 18:01 root_shell
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard   &lt;span class="m"&gt;50&lt;/span&gt; Mar &lt;span class="m"&gt;31&lt;/span&gt; 17:59 root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a intentar ocultar lo que nos delataría a simple vista; eliminamos el innecesario código fuente y ocultaremos el binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv root_shell .hidden
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que sigue funcionando, y que tiene la &lt;em&gt;capability&lt;/em&gt; que le hemos dado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./.hidden
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1002&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ getpcaps .hidden
Capabilities &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;.hidden&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;=&lt;/span&gt; cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap+i
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="shell"></category><category term="root"></category><category term="capabilities"></category></entry><entry><title>Controlando contenedores docker con ansible</title><link href="http://www.linuxsysadmin.tk/2016/06/controlando-contenedores-docker-con-ansible.html" rel="alternate"></link><published>2016-06-06T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-06-06:2016/06/controlando-contenedores-docker-con-ansible.html</id><summary type="html">&lt;p&gt;La facilidad de levantar un contenedor &lt;strong&gt;docker&lt;/strong&gt; nos lleva a la pregunta del millón: ¿es posible usar &lt;strong&gt;docker&lt;/strong&gt; para crear contenedores de usar y tirar para probar otras tecnologías? La respuesta es que sí, y para demostrarlo, vamos a generar un entorno minimalista en contenedores &lt;strong&gt;docker&lt;/strong&gt;, desplegados mediante &lt;strong&gt;ansible&lt;/strong&gt; &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: De acuerdo con el autor de &lt;strong&gt;docker&lt;/strong&gt;, nunca deberíais poner &lt;strong&gt;SSH&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt; (artículo &lt;a href="https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/"&gt;aquí&lt;/a&gt;). Sin embargo, hoy vamos a hacer una excepción para esta demostración.&lt;/p&gt;
&lt;h2&gt;Las imágenes base&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a levantar una serie de máquinas y vamos a dejar que &lt;strong&gt;ansible&lt;/strong&gt; las provisiones mediante &lt;em&gt;playbooks&lt;/em&gt;; para ello necesitamos una imagen base. También vamos a crear una imagen que solo sirva para ejecutar &lt;strong&gt;ansible&lt;/strong&gt;, que vamos a crear y a destruir según lo necesitemos.&lt;/p&gt;
&lt;p&gt;Vamos a empezar creando la imagen &lt;em&gt;master&lt;/em&gt;, que contiene la herramienta &lt;strong&gt;ansible&lt;/strong&gt; (vamos a poner una versión superior desde los &lt;em&gt;backports&lt;/em&gt;) y sus dependencias. Este es nuestro &lt;em&gt;Dockerfile&lt;/em&gt; y el fichero &lt;em&gt;ansible.cfg&lt;/em&gt; que va a gobernarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat ansible.cfg 
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
gerard@sirius:~/build$ cat Dockerfile.master 
FROM debian:jessie-backports
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y openssh-client sshpass nano
RUN apt-get install -y -t jessie-backports ansible
ADD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ansible.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/root/.ansible.cfg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen mediante el comando &lt;em&gt;build&lt;/em&gt; y le ponemos el &lt;em&gt;tag&lt;/em&gt; "master".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.master -t master .
Sending build context to Docker daemon 4.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie-backports
 ---&amp;gt; 99552579b6f6
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y openssh-client sshpass nano
 ---&amp;gt; Running in 6e311500cbeb
...
 ---&amp;gt; d014d43ddf74
Removing intermediate container 6e311500cbeb
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN apt-get install -y -t jessie-backports ansible
 ---&amp;gt; Running in d047144fce1b
...
 ---&amp;gt; 10881f414b84
Removing intermediate container d047144fce1b
Step &lt;span class="m"&gt;4&lt;/span&gt; : ADD ansible.cfg /root/.ansible.cfg
 ---&amp;gt; 08fd2580e558
Removing intermediate container c6b3c29e8682
Step &lt;span class="m"&gt;5&lt;/span&gt; : CMD /bin/bash
 ---&amp;gt; Running in 7b1199ff749f
 ---&amp;gt; 58689ad42e3e
Removing intermediate container 7b1199ff749f
Successfully built 58689ad42e3e
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear la imagen para las máquinas controladas, mediante un &lt;em&gt;Dockerfile&lt;/em&gt; creado a tal efecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile.slave 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /var/run/sshd
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuevamente lanzamos el &lt;em&gt;build&lt;/em&gt; con el &lt;em&gt;tag&lt;/em&gt; "slave".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.slave -t slave .
Sending build context to Docker daemon 4.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /var/run/sshd
 ---&amp;gt; Running in ecc6f15ffdc1
...
 ---&amp;gt; ecd77bdcc643
Removing intermediate container ecc6f15ffdc1
Step &lt;span class="m"&gt;3&lt;/span&gt; : CMD /usr/sbin/sshd -D
 ---&amp;gt; Running in 09b2642eb314
 ---&amp;gt; 306389180c9f
Removing intermediate container 09b2642eb314
Successfully built 306389180c9f
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que tenemos ambas imágenes preparadas para crear nuestros contenedores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
slave               latest              306389180c9f        &lt;span class="m"&gt;5&lt;/span&gt; seconds ago       &lt;span class="m"&gt;186&lt;/span&gt; MB
master              latest              58689ad42e3e        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       245.4 MB
debian              jessie-backports    99552579b6f6        &lt;span class="m"&gt;6&lt;/span&gt; days ago          125.1 MB
debian              jessie              bb5d89f9b6cb        &lt;span class="m"&gt;6&lt;/span&gt; days ago          125.1 MB
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando los contenedores necesarios&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a crear un micro entorno compuesto por dos servidores y un balanceador, que es la fachada del sistema. La salida de cada petición web va a indicar el nombre de la máquina que la sirvió, para poder comprobar que balancea adecuadamente.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;flags&lt;/em&gt; de ejecución son &lt;em&gt;--name&lt;/em&gt; (el nombre con el que nos referiremos en los comandos &lt;em&gt;docker&lt;/em&gt;), el &lt;em&gt;-h&lt;/em&gt; (para dar un nombre de sistema operativo a la máquina), el &lt;em&gt;-d&lt;/em&gt; (&lt;em&gt;detach&lt;/em&gt;, para que no nos bloquee el terminal) y la imagen &lt;em&gt;slave&lt;/em&gt; que tiene instalados &lt;strong&gt;ssh&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt; y &lt;strong&gt;sudo&lt;/strong&gt;. Adicionalmente la imagen del balanceador &lt;em&gt;publica&lt;/em&gt; su puerto 80 en el puerto 8000 de la máquina &lt;em&gt;host&lt;/em&gt;, para poder acceder por &lt;strong&gt;HTTP&lt;/strong&gt; desde nuestra máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run --name balancer -h balancer -d -p 8000:80 slave
7a80942c69a70e729fc7090983fc59735fd0c10818a5b62b64a26a98e58fc101
gerard@sirius:~/build$ docker run --name server1 -h server1 -d slave
745acb30c5c1b7067a15f593dfefce3e769d2a7b5423f001b6a080296c3aeb3f
gerard@sirius:~/build$ docker run --name server2 -h server2 -d slave
a469c0f69bb42a3c979037b125750a4cc1bf01750c24bd7cef277b9b6e7dc2d0
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante anotar las direcciones IP de las máquinas, para saber qué tenemos en cada sitio. Esta información nos sirve para montar la configuración del balanceador y para el inventario de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker inspect balancer &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server1 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server2 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos crear un contenedor de la imagen &lt;em&gt;master&lt;/em&gt; que tiene &lt;strong&gt;ansible&lt;/strong&gt; para &lt;em&gt;empujar&lt;/em&gt; los &lt;em&gt;playbooks&lt;/em&gt; a las &lt;em&gt;slaves&lt;/em&gt;. Esta máquina es de "usar y tirar".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -ti --rm -h ansible master
root@ansible:/# &lt;span class="nb"&gt;cd&lt;/span&gt; /root/
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Manos a la obra: los playbooks&lt;/h2&gt;
&lt;p&gt;Este punto es similar al uso de &lt;strong&gt;ansible&lt;/strong&gt; sin &lt;strong&gt;docker&lt;/strong&gt;. Se trata de definir el fichero de &lt;em&gt;hosts&lt;/em&gt;, los &lt;em&gt;playbooks&lt;/em&gt; y los ficheros que estos puedan necesitar. En este caso concreto, vemos que necesitamos (&lt;em&gt;hosts&lt;/em&gt; y &lt;em&gt;playbooks&lt;/em&gt; aparte) la aplicación &lt;strong&gt;python&lt;/strong&gt; que vamos a servir, la configuracion para &lt;strong&gt;uwsgi&lt;/strong&gt; y la configuración del balanceador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- balancer.yml
&lt;span class="p"&gt;|&lt;/span&gt;-- files
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- balancer
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- myapp.ini
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- myapp.py
&lt;span class="p"&gt;|&lt;/span&gt;-- hosts
&lt;span class="sb"&gt;`&lt;/span&gt;-- servers.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un paso necesario es crear el fichero de &lt;em&gt;hosts&lt;/em&gt;, que incluye los grupos, los contenedores que los forman y los parámetros de conexión a los mismos (como los declaramos en los &lt;em&gt;Dockerfiles&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts 
&lt;span class="o"&gt;[&lt;/span&gt;all:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;
172.17.0.2

&lt;span class="o"&gt;[&lt;/span&gt;servers&lt;span class="o"&gt;]&lt;/span&gt;
172.17.0.3
172.17.0.4
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Los servidores de aplicaciones&lt;/h3&gt;
&lt;p&gt;La idea es que este grupo va a servir una aplicación &lt;strong&gt;python&lt;/strong&gt; mediante el servidor &lt;strong&gt;uwsgi&lt;/strong&gt;. Esta aplicación es un ejemplo muy simple, que se limita a indicar el &lt;em&gt;hostname&lt;/em&gt; de la máquina, en forma de saludo. Esta aplicación se sirve en el puerto TCP 8080. Estos son el &lt;em&gt;playbook&lt;/em&gt; y los ficheros necesarios para su ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/myapp.py 
import os

def application&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield &lt;span class="s1"&gt;&amp;#39;Hello from %s\n&amp;#39;&lt;/span&gt; % os.uname&lt;span class="o"&gt;()[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
root@ansible:~# cat files/myapp.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 2
http-socket &lt;span class="o"&gt;=&lt;/span&gt; 0.0.0.0:8080
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; myapp:application
root@ansible:~# cat servers.yml 
- hosts: servers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;={{&lt;/span&gt; item &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
      with_items:
        - uwsgi-emperor
        - uwsgi-plugin-python
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uwsgi-emperor &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.py &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/myapp.py
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.ini &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;touch
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esta información, es todo tan fácil como lanzar el &lt;em&gt;playbook&lt;/em&gt; con el inventario creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts servers.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
172.17.0.3                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
172.17.0.4                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podríamos hacer peticiones al puerto para obtener respuestas adecuadas.&lt;/p&gt;
&lt;h3&gt;El balanceador&lt;/h3&gt;
&lt;p&gt;Vamos a utilizar &lt;strong&gt;nginx&lt;/strong&gt; con una configuración propia de balanceador, que también necesitamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/balancer 
upstream servers &lt;span class="o"&gt;{&lt;/span&gt;
    server 172.17.0.3:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server 172.17.0.4:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://servers&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@ansible:~# cat balancer.yml 
- hosts: balancer
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/balancer &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/balancer
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos lo suficiente para lanzar la provisión. Allá vamos!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts balancer.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;172.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
172.17.0.2                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede verificar que funciona lanzando peticiones al puerto 80 de esta máquina.&lt;/p&gt;
&lt;h2&gt;Comprobación del resultado&lt;/h2&gt;
&lt;p&gt;La mala noticia es que la red 172.17.0.0/16 es privada, y no podemos acceder a ella a menos que sea desde un contenedor. La buena, es que tuvimos la previsión de publicar el puerto 80 del contenedor, mapeado en el puerto 8000 del &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, es como si el puerto 80 del balanceador fuera el puerto 8000 de nuestra máquina. Basta con hacer algunas peticiones para darse cuenta de que tenemos las máquinas perfectamente funcionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="docker"></category><category term="dockerfile"></category><category term="ansible"></category><category term="playbook"></category></entry><entry><title>Autenticación SSH por claves</title><link href="http://www.linuxsysadmin.tk/2016/05/autenticacion-ssh-por-claves.html" rel="alternate"></link><published>2016-05-30T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-05-30:2016/05/autenticacion-ssh-por-claves.html</id><summary type="html">&lt;p&gt;A pesar de que el protocolo &lt;strong&gt;SSH&lt;/strong&gt; es lo que mas seguridad ofrece hoy en día, un servidor rápido puede probar gran cantidad de contraseñas generadas mediante un generador por fuerza bruta. Para añadir mas seguridad podemos autenticar mediante claves en vez de usar contraseña, opcionalmente protegidos con una &lt;em&gt;passphrase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que un cliente del servidor &lt;strong&gt;SSH&lt;/strong&gt; se autentique reemplazando la contraseña habitual por una clave, previamente generada y con su parte pública compartida con anterioridad.&lt;/p&gt;
&lt;h2&gt;Disposición inicial&lt;/h2&gt;
&lt;p&gt;Para la demostración tenemos dos servidores, con los roles claramente especificados en el nombre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME       STATE    IPV4      IPV6  AUTOSTART
---------------------------------------------
client     RUNNING  10.0.0.3  -     NO
sshserver  RUNNING  10.0.0.2  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el caso del servidor, necesitamos un servidor &lt;strong&gt;SSH&lt;/strong&gt; levantado y listo para recibir nuevas sesiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; 0.0.0.0:22              0.0.0.0:*               LISTEN      76/sshd
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      76/sshd
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un usuario con el que podamos entrar en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# grep gerard /etc/passwd
gerard:x:1000:1000:,,,:/home/gerard:/bin/bash
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si intentamos entrar en el servidor desde la máquina cliente, vemos que se nos pide la contraseña, tras lo cual iniciamos la sesión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2
gerard@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password:

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si lo volvemos a intentar, se nos pedirá la &lt;em&gt;password&lt;/em&gt; una y otra vez.&lt;/p&gt;
&lt;h2&gt;Montando el par de claves&lt;/h2&gt;
&lt;p&gt;Desde la máquina cliente, generamos el par de claves mediante el comando &lt;strong&gt;ssh-keygen&lt;/strong&gt;. Sin parámetros va a generar un clave tipo &lt;strong&gt;RSA&lt;/strong&gt;, que ya nos vale.&lt;/p&gt;
&lt;p&gt;Es importante indicar que la &lt;em&gt;passphrase&lt;/em&gt; es más segura que la &lt;em&gt;password&lt;/em&gt;, y que la necesidad de la clave convierte el combo en lo mas seguro de lo que disponemos. Vamos a dejarla en blanco para asegurar la autenticación con claves sin &lt;em&gt;passphrase&lt;/em&gt;, por comodidad nuestra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
58:6b:38:71:82:a4:b2:97:4d:cc:6d:cd:43:6d:26:00 root@client
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA 2048&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;    E.....       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; o +. +      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. . &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; *+       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; o + . B o       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. o . + S        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; .     o         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos ha generado el par de claves en la carpeta que nos preguntó el comando de generación. En este caso dejamos los valores por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ls -1 .ssh/
id_rsa
id_rsa.pub
known_hosts
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos dos ficheros nuevos. El fichero &lt;em&gt;id_rsa&lt;/em&gt; es la clave privada, y es una parte que nunca debe compartirse. El fichero &lt;em&gt;id_rsa.pub&lt;/em&gt; es la parte pública de la clave y es la que debemos repartir a los servidores a los que pretendamos tener acceso con la clave.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para garantizar el acceso a nuestro servidor, debemos poner una nueva línea en el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario remoto, que es la parte pública de la clave. Es especialmente importante que la carpeta &lt;em&gt;.ssh&lt;/em&gt; exista y no tenga permisos para nada ni nadie aparte del usuario propietario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sshserver:~$ mkdir .ssh
gerard@sshserver:~$ chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh/
gerard@sshserver:~$ cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pueden haber varias claves públicas en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;, para garantizar la autenticación desde diferentes lugares sin compartir las claves entre los servidores de  origen.&lt;/p&gt;
&lt;h2&gt;Comprobando su funcionamiento&lt;/h2&gt;
&lt;p&gt;Para ver que todo funciona, basta con intentar entrar en la sesión; si todo va bien, no nos va a pedir &lt;em&gt;password&lt;/em&gt; sino &lt;em&gt;passphrase&lt;/em&gt;, suponiendo que no la dejáramos en blanco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu May &lt;span class="m"&gt;19&lt;/span&gt; 10:11:51 &lt;span class="m"&gt;2016&lt;/span&gt; from 10.0.0.3
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si ponemos el &lt;em&gt;flag&lt;/em&gt; de &lt;em&gt;verbose&lt;/em&gt;, vemos que el servidor origen &lt;strong&gt;ofrece&lt;/strong&gt; automáticamente la clave generada. Si la clave no estuviera en los sitios normales, habría que indicarlo en el comando &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh -v gerard@10.0.0.2
...
debug1: Connecting to 10.0.0.2 &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.2&lt;span class="o"&gt;]&lt;/span&gt; port 22.
debug1: Connection established.
...
debug1: Authentications that can &lt;span class="k"&gt;continue&lt;/span&gt;: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /root/.ssh/id_rsa
...
debug1: Authentication succeeded &lt;span class="o"&gt;(&lt;/span&gt;publickey&lt;span class="o"&gt;)&lt;/span&gt;.
...
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que la parte privada que se ofrece es la que hay en la carpeta del usuario del servidor origen, pero la validación se hace con el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario en el servidor remoto.&lt;/p&gt;</summary><category term="linux"></category><category term="ssh"></category><category term="autenticación"></category><category term="password"></category><category term="passphrase"></category><category term="rsa"></category></entry><entry><title>Algunas ideas sueltas sobre Ansible</title><link href="http://www.linuxsysadmin.tk/2016/05/algunas-ideas-sueltas-sobre-ansible.html" rel="alternate"></link><published>2016-05-09T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-05-09:2016/05/algunas-ideas-sueltas-sobre-ansible.html</id><summary type="html">&lt;p&gt;En un &lt;a href="http://www.linuxsysadmin.tk/2016/04/instalando-ansible-para-gestionar-servidores.html"&gt;artículo anterior&lt;/a&gt; vimos qué era &lt;strong&gt;Ansible&lt;/strong&gt; y como instalarlo, dejando su funcionamiento para el lector; Hay miles de tutoriales por internet, y muchos son mejores de los que pueda poner aquí. Sin embargo, hay algunas ideas que no son fáciles de ver juntas, así que aquí las dejo.&lt;/p&gt;
&lt;h2&gt;Playbooks plantilla&lt;/h2&gt;
&lt;p&gt;Si solo queremos los &lt;em&gt;playbooks&lt;/em&gt; como una manera fácil de aprovisionar una máquina, nos conviene que no tenga un &lt;em&gt;host&lt;/em&gt; asignado en el mismo, para poder pasar el objetivo por parámetro. Por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat ping.yml
- hosts: &lt;span class="s1"&gt;&amp;#39;{{ target }}&amp;#39;&lt;/span&gt;
  tasks:
    - ping:
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso hay que pasar un argumento extra como &lt;em&gt;target&lt;/em&gt;, y en caso de no ponerlo, el &lt;em&gt;playbook&lt;/em&gt; no haría nada. Con este truco, podemos ir variando el objetivo, siempre que esté en el fichero &lt;em&gt;hosts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook ping.yml

PLAY &lt;span class="o"&gt;[{{&lt;/span&gt; target &lt;span class="o"&gt;}}]&lt;/span&gt; ***********************************************************
skipping: no hosts matched

PLAY RECAP ********************************************************************

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=appservers&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt; *************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
10.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
10.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=10.0.0.3&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.3&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;10.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
10.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variar el entorno sin cambiar los playbooks&lt;/h2&gt;
&lt;p&gt;Aunque las máquinas y las redes asignadas a cada entorno sean variables, los grupos y funcionalidades son las mismas. Suponiendo que los &lt;em&gt;playbooks&lt;/em&gt; actúen contra los grupos, variando el fichero de &lt;em&gt;hosts&lt;/em&gt; podemos conseguir todos los entornos necesarios.&lt;/p&gt;
&lt;p&gt;De hecho, podemos tener varios ficheros de &lt;em&gt;hosts&lt;/em&gt; y especificarlos por parámetro en el momento de lanzar &lt;strong&gt;ansible-playbook&lt;/strong&gt;. Por ejemplo, para el entorno de &lt;em&gt;preproducción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pre
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
172.20.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
172.20.0.3
172.20.0.4

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
172.20.0.5
root@ansible:~# ansible-playbook -i hosts-pre --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
      172.20.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;:
      172.20.0.3
      172.20.0.4

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
      172.20.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y casi lo mismo para el entono de &lt;em&gt;producción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pro
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
10.0.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
10.0.0.3
10.0.0.4
10.0.0.5
10.0.0.6
10.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
10.0.0.8
10.0.0.9
10.0.0.10
root@ansible:~# ansible-playbook -i hosts-pro --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
      10.0.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;5&lt;span class="o"&gt;)&lt;/span&gt;:
      10.0.0.5
      10.0.0.4
      10.0.0.7
      10.0.0.6
      10.0.0.3

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt;:
      10.0.0.9
      10.0.0.8
      10.0.0.10
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Inventario autogenerado&lt;/h2&gt;
&lt;p&gt;A veces nos conviene sacar la lista de &lt;em&gt;hosts&lt;/em&gt; y de &lt;em&gt;grupos&lt;/em&gt; de otro lugar, por ejemplo, de una base de datos corporativa. En estos casos, basta con saber que el fichero &lt;em&gt;hosts&lt;/em&gt; puede ser ejecutable y se espera que devuelva un diccionario JSON de &lt;em&gt;grupos&lt;/em&gt;, cada uno con una lista de los &lt;em&gt;hosts&lt;/em&gt; que lo componen. &lt;strong&gt;Ansible&lt;/strong&gt; va a ejecutar el &lt;em&gt;script&lt;/em&gt; para sacar esa información.&lt;/p&gt;
&lt;p&gt;Vamos a hacer un ejercicio de imaginación: supongamos este &lt;em&gt;script&lt;/em&gt; saca los datos de algún sitio (LDAP, BBDD, una API de nuestra CMDB, ...), y los saca en formato JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import json

&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.3&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;10.0.0.4&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

print json.dumps&lt;span class="o"&gt;(&lt;/span&gt;inventory&lt;span class="o"&gt;)&lt;/span&gt;
root@ansible:~# chmod &lt;span class="m"&gt;755&lt;/span&gt; hosts.py
root@ansible:~# ./hosts.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.3&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;10.0.0.4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;loadbalancer&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;dbservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos que es capaz de sacar los grupos que le pidamos de forma fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts.py --list-hosts loadbalancer
  hosts &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
    10.0.0.2
root@ansible:~# ansible -i hosts.py --list-hosts appservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;:
    10.0.0.3
    10.0.0.4
root@ansible:~# ansible -i hosts.py --list-hosts dbservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
    10.0.0.5
root@ansible:~# ansible -i hosts.py --list-hosts all
  hosts &lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;:
    10.0.0.3
    10.0.0.4
    10.0.0.2
    10.0.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Desplegar ficheros según el host&lt;/h2&gt;
&lt;p&gt;En los &lt;em&gt;playbooks&lt;/em&gt; podemos usar variables, bien sean de ejecución, o las que indiquemos nosotros. Esto puede jugar a nuestro favor en caso, por ejemplo, de querer desplegar ficheros distintos en cada servidor. Un ejemplo:&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos esta estructura de ficheros, con su fichero de &lt;em&gt;hosts&lt;/em&gt; y su &lt;em&gt;playbook&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# tree
.
├── hosts
├── playbook.yml
└── webs
    ├── server1
    │   ├── index.html
    │   └── sitemap.xml
    └── server2
        ├── adminer.php
        └── index.php

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~/multiple_webservers# cat hosts
&lt;span class="o"&gt;[&lt;/span&gt;webservers&lt;span class="o"&gt;]&lt;/span&gt;
server1
server2
root@ansible:~/multiple_webservers# cat playbook.yml
- hosts: webservers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;webs/&lt;span class="o"&gt;{{&lt;/span&gt; inventory_hostname &lt;span class="o"&gt;}}&lt;/span&gt;/ &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt; para aprovisionar los ficheros &lt;em&gt;web&lt;/em&gt; a los servidores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ansible-playbook -i hosts playbook.yml

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;server1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;server2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
server1                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
server2                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y fácilmente comprobamos que cada servidor tiene los suyos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ssh root@server1 ls /var/www/
index.html
sitemap.xml
root@ansible:~/multiple_webservers# ssh root@server2 ls /var/www/
adminer.php
index.php
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variables en el inventario&lt;/h2&gt;
&lt;p&gt;Hay algunas variables que dependen de la máquina en la que se ejecutan. Aunque es posible definir estructuras condicionales en los &lt;em&gt;playbooks&lt;/em&gt;, no escala. Para no ensuciar los &lt;em&gt;playbooks&lt;/em&gt;, las podemos definir en el fichero de &lt;em&gt;hosts&lt;/em&gt;. Así pues, cada &lt;em&gt;grupo&lt;/em&gt; puede tener sus propias variables; pueden ser variables "nuestras" o variables que entienda &lt;strong&gt;ansible&lt;/strong&gt;. Como ejemplo, un &lt;em&gt;inventario&lt;/em&gt; con variables de acceso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts
[slaves]
10.0.0.2
10.0.0.3

[slaves:vars]
ansible_user = ansible
ansible_ssh_pass = s3cr3t
ansible_become = true
ansible_become_method = sudo
ansible_become_user = root
ansible_become_pass = s3cr3t
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, y de acuerdo con la &lt;a href="http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters"&gt;documentación oficial&lt;/a&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, entraríamos con el usuario &lt;em&gt;ansible&lt;/em&gt; para hacer seguidamente &lt;strong&gt;sudo&lt;/strong&gt; para actuar con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts -m command -a id slaves
10.0.0.3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

10.0.0.2 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ansible"></category><category term="playbook"></category></entry><entry><title>Instalando ansible para gestionar servidores</title><link href="http://www.linuxsysadmin.tk/2016/04/instalando-ansible-para-gestionar-servidores.html" rel="alternate"></link><published>2016-04-11T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-04-11:2016/04/instalando-ansible-para-gestionar-servidores.html</id><summary type="html">&lt;p&gt;Cuando nos encontramos delante de servidores únicos, es bastante fácil su gestión. Sin embargo, cuando tenemos 8 instancias de cada tipo de servidor, las tareas se vuelven lentas y repetitivas. Podemos incluso automatizar la gestión de una sola máquina para hacer su entorno fácilmente reproducible, en vistas a su reconstrucción.&lt;/p&gt;
&lt;p&gt;Para ello existen algunas herramientas capaces de modificar los servidores, sea mediante un protocolo de &lt;strong&gt;pull&lt;/strong&gt; (&lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt;) que tienen agentes capaces de pedir a un servidor central las reglas a aplicarse, o mediante un protocolo de &lt;strong&gt;push&lt;/strong&gt; (&lt;strong&gt;fabric&lt;/strong&gt;, &lt;strong&gt;ansible&lt;/strong&gt;) que simplemente son formas de enviar esas órdenes desde el servidor central.&lt;/p&gt;
&lt;p&gt;Hoy vamos a instalar &lt;strong&gt;ansible&lt;/strong&gt;, herramienta que considero muy interesante por su simplicidad; carece de agentes activos, funcionando como un conjunto de &lt;em&gt;scripts&lt;/em&gt; en una máquina cualquiera que actúa de servidor y utilizando el protocolo &lt;strong&gt;SSH&lt;/strong&gt; para empujar los &lt;em&gt;scripts&lt;/em&gt;, que se ejecutan con un &lt;strong&gt;python&lt;/strong&gt; en el servidor destino.&lt;/p&gt;
&lt;p&gt;Si estuviéramos en una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;, la instalación es tan fácil como lanzar &lt;strong&gt;apt-get&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~$ apt-get install ansible
...  
root@server:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, instalarlo a nivel de sistema es un problema en algunos entornos, así que podemos instalarlo en una carpeta local, concretamente en un &lt;strong&gt;virtualenv&lt;/strong&gt; dedicado en nuestra carpeta personal. Esta es la forma que se explica en este tutorial.&lt;/p&gt;
&lt;p&gt;Empezaremos con un servidor cualquiera; al no tener agentes activos y ser &lt;em&gt;scripts&lt;/em&gt;, nos vale cualquiera. En este caso se ha usado una máquina tipo &lt;strong&gt;RedHat&lt;/strong&gt;. Realmente no nos importa demasiado la versión de &lt;strong&gt;python&lt;/strong&gt; que utilice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release 6.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ python -V
Python 2.6.6
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del virtualenv con ansible&lt;/h2&gt;
&lt;p&gt;Vamos a construir el &lt;strong&gt;virtualenv&lt;/strong&gt; desde cero. Si nos interesara hacerlo en otra máquina en la que tengamos permisos para instalar paquetes, bastaría con copiar la carpeta del &lt;strong&gt;virtualenv&lt;/strong&gt; en el mismo sitio, y sin instalar nada mas.&lt;/p&gt;
&lt;p&gt;Las únicas dependencias que se necesitan para construir el &lt;strong&gt;virtualenv&lt;/strong&gt; es &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python-devel&lt;/strong&gt; (o &lt;strong&gt;python-dev&lt;/strong&gt; si se tratara de una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;). Como ya tenemos &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python&lt;/strong&gt;, instalamos solamente &lt;strong&gt;python-devel&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@toolbox:~$ sudo yum install python-devel
Loaded plugins: product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Setting up Install Process
...
Installed:
  python-devel.x86_64 0:2.6.6-64.el6

Complete!
gerard@toolbox:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para no instalar nada innecesario en la máquina, vamos a descargar el comando &lt;em&gt;virtualenv&lt;/em&gt;, que va a cumplir su función y va a ser eliminado. Lo descargamos y lo descomprimimos, en cualquier carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
--2016-04-05 11:54:27--  https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
Resolving pypi.python.org... 23.235.43.223
Connecting to pypi.python.org&lt;span class="p"&gt;|&lt;/span&gt;23.235.43.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;1842776&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1.8M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “virtualenv-15.0.1.tar.gz”

100%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; 1,842,776   2.90M/s   in 0.6s

2016-04-05 11:54:28 &lt;span class="o"&gt;(&lt;/span&gt;2.90 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “virtualenv-15.0.1.tar.gz” saved &lt;span class="o"&gt;[&lt;/span&gt;1842776/1842776&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf virtualenv-15.0.1.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizamos el comando &lt;em&gt;virtualenv&lt;/em&gt; para generar la estructura contenedora, de la misma manera que otros &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./virtualenv-15.0.1/virtualenv.py ansible
New python executable in /home/gerard/ansible/bin/python
Installing setuptools, pip, wheel...done.
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hacemos limpieza de &lt;strong&gt;virtualenv&lt;/strong&gt;, que ya no vamos a necesitar mas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm -R virtualenv-15.0.1*
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La instalación es la misma que haríamos con cualquier módulo de &lt;strong&gt;python&lt;/strong&gt;, con la excepción que va a generar fichero &lt;em&gt;.so&lt;/em&gt;, dependientes de la arquitectura del procesador que los genere. Si movéis el &lt;strong&gt;virtualenv&lt;/strong&gt;, tened esto en cuenta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ansible/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ pip install ansible
DEPRECATION: Python 2.6 is no longer supported by the Python core team, please upgrade your Python. A future version of pip will drop support &lt;span class="k"&gt;for&lt;/span&gt; Python 2.6
Collecting ansible
...
Installing collected packages: ecdsa, pycrypto, paramiko, MarkupSafe, jinja2, PyYAML, ansible
Successfully installed MarkupSafe-0.23 PyYAML-3.11 ansible-2.0.1.0 ecdsa-0.13 jinja2-2.8 paramiko-1.16.0 pycrypto-2.6.1
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ deactivate
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Controlando nuestro primer esclavo&lt;/h2&gt;
&lt;p&gt;Vamos a habilitar una máquina cualquiera como receptora de &lt;strong&gt;ansible&lt;/strong&gt;. Los puntos básicos a tener en cuenta es que vamos a habilitar &lt;strong&gt;SSH&lt;/strong&gt; por claves (sin contraseña) y debemos asegurar que la máquina destino tiene un &lt;strong&gt;python&lt;/strong&gt; instalado.&lt;/p&gt;
&lt;p&gt;Empezaremos generando las claves privada y pública en la máquina controladora. Esto se hace mediante el comando &lt;em&gt;ssh-keygen&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/gerard/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Created directory &lt;span class="s1"&gt;&amp;#39;/home/gerard/.ssh&amp;#39;&lt;/span&gt;.
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /home/gerard/.ssh/id_rsa.
Your public key has been saved in /home/gerard/.ssh/id_rsa.pub.
The key fingerprint is:
8e:74:f9:49:70:ba:15:d0:93:ff:88:5a:6a:f5:ad:cd gerard@toolbox
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class="o"&gt;[&lt;/span&gt; RSA 2048&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;        .. .     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         .+      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        . oo     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; ..    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . S o. o   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     . + &lt;span class="o"&gt;=&lt;/span&gt;+.. .  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;o. .   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        +   .o.  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       .    ..E  &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto va a generar una carpeta &lt;em&gt;.ssh&lt;/em&gt; en nuestra carpeta personal, con dos ficheros generados: &lt;em&gt;id_rsa&lt;/em&gt; (clave privada) e &lt;em&gt;id_rsa.pub&lt;/em&gt; (clave pública). La idea es que la clave privada se va a ofrecer automáticamente cuando se haga &lt;strong&gt;ssh&lt;/strong&gt;, y si la parte pública esta en &lt;em&gt;~/.ssh/authorized_keys&lt;/em&gt; del usuario remoto, el login se hace automático.&lt;/p&gt;
&lt;p&gt;La clave privada es sagrada, y no debe entregarse a nadie. Sin embargo, la parte pública es la que se va a poner en todas las máquinas controladas. Se trata de una línea que vamos a añadir al &lt;em&gt;authorized_keys&lt;/em&gt; de todas las máquinas, así que la apuntamos en algún sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la máquina controlada, añadimos la línea de la clave pública en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;. Vamos a controlar login automático contra el usuario &lt;em&gt;root&lt;/em&gt; en nuestra máquina de ejemplo misma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat .ssh/authorized_keys&lt;/span&gt;
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que tengamos las claves &lt;strong&gt;SSH&lt;/strong&gt; distribuidas, y &lt;strong&gt;python&lt;/strong&gt; instalado en las máquinas controladas, podemos probar. Para ello, vamos a añadir esta máquina en el fichero de &lt;em&gt;hosts&lt;/em&gt;, sea por nombre o por dirección IP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat hosts
127.0.0.1
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lanzamos el módulo &lt;strong&gt;ping&lt;/strong&gt; a todas las máquinas (que solo es la de test, de momento).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./ansible/bin/ansible -u root -i hosts -m ping all
127.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando un fichero de configuración&lt;/h2&gt;
&lt;p&gt;Las opciones por defecto de &lt;strong&gt;ansible&lt;/strong&gt; son bastante correctas, pero hay algunos parámetros que se pueden poner por fichero de configuración; esto nos facilita bastante las cosas. Este fichero de configuración es el primero que se encuentre siguiendo este orden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ANSIBLE_CONFIG (lo que diga esta variable de entorno)&lt;/li&gt;
&lt;li&gt;ansible.cfg (en el directorio actual de trabajo)&lt;/li&gt;
&lt;li&gt;.ansible.cfg (en la carpeta personal de nuestro usuario)&lt;/li&gt;
&lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De hecho, si os parece bien utilizar carpetas de sistema, la última opción es la normal. Sin embargo, me interesa restringirme a mi carpeta local, por falta de permisos habitualmente.&lt;/p&gt;
&lt;p&gt;De la misma manera, el fichero de &lt;em&gt;hosts&lt;/em&gt; se busca en un sitio concreto, que con la configuración estándar es &lt;em&gt;/etc/ansible/hosts&lt;/em&gt;, a menos que se indique explícitamente el flag &lt;em&gt;-i&lt;/em&gt; en los comandos.&lt;/p&gt;
&lt;p&gt;Para evitar usar estos dos ficheros fuera de nuestra carpeta, vamos a crearlos en el &lt;strong&gt;virtualenv&lt;/strong&gt; creado, añadiéndolos en una carpeta &lt;em&gt;etc&lt;/em&gt;, que vamos a crear. Todos los parámetros se van a poner en el fichero de configuración y vamos a explicitar la localización del fichero de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mkdir ansible/etc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat ansible/etc/ansible.cfg
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/gerard/ansible/etc/hosts
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;remote_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv hosts ansible/etc/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras crear la configuración, la probamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gerard/ansible/etc/ansible.cfg ./ansible/bin/ansible -m ping all
127.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conseguir eliminar el &lt;em&gt;path&lt;/em&gt; absoluto del binario de ansible, lo añadimos en la variable de entorno &lt;em&gt;PATH&lt;/em&gt;. Para nuestra comodidadd, podemos definir ambas variables de entorno en el fichero &lt;em&gt;.bashrc&lt;/em&gt;. Este fichero se va a activar cada vez que se inicie &lt;strong&gt;bash&lt;/strong&gt;; para no cerrar y abrir sesión lo incluimos a mano.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tail -2 .bashrc
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/etc/ansible.cfg
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente obtenemos la versión mínima del comando a ejecutar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ansible -m ping all
127.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo queda poner mas servidores en el fichero de &lt;em&gt;hosts&lt;/em&gt; y lanzar comandos y &lt;em&gt;playbooks&lt;/em&gt; útiles contra los mismos.&lt;/p&gt;</summary><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category><category term="ansible"></category><category term="ssh"></category><category term="virtualenv"></category></entry><entry><title>Compilando python desde cero</title><link href="http://www.linuxsysadmin.tk/2016/04/compilando-python-desde-cero.html" rel="alternate"></link><published>2016-04-04T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-04-04:2016/04/compilando-python-desde-cero.html</id><summary type="html">&lt;p&gt;Siempre que estoy trabajando en un servidor CentOS o RedHat, veo que las versiones de &lt;em&gt;python&lt;/em&gt; que usan son bastante viejas. De hecho, hay una gran mejora de &lt;em&gt;python&lt;/em&gt; entre las versiones 2.4, 2.6 y 2.7; así que es frecuente compilar una versión superior para nuestro uso.&lt;/p&gt;
&lt;p&gt;Para este tutorial he usado una máquina virtual con un sistema operativo &lt;em&gt;RedHat&lt;/em&gt;. Realmente no necesita ninguna configuración &lt;em&gt;hardware&lt;/em&gt; adicional. Lo único relevante es que estamos tratando con una versión de &lt;em&gt;RedHat&lt;/em&gt; 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release 6.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro requisito necesario es el fichero &lt;em&gt;tarball&lt;/em&gt; con las fuentes de &lt;em&gt;python&lt;/em&gt;. Esto lo podemos encontrar en &lt;a href="https://www.python.org/"&gt;la página de &lt;em&gt;python&lt;/em&gt;&lt;/a&gt;. Al tiempo de escritura, la última &lt;em&gt;release&lt;/em&gt; de la serie de &lt;em&gt;python&lt;/em&gt; 2 era la 2.7.11.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
--2016-03-29 16:27:54--  https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
Resolving www.python.org... 185.31.17.223
Connecting to www.python.org&lt;span class="p"&gt;|&lt;/span&gt;185.31.17.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;16856409&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;16M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “Python-2.7.11.tgz”

100%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; 16,856,409  17.3M/s   in 0.9s

2016-03-29 16:27:55 &lt;span class="o"&gt;(&lt;/span&gt;17.3 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “Python-2.7.11.tgz” saved &lt;span class="o"&gt;[&lt;/span&gt;16856409/16856409&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compilar las fuentes&lt;/h2&gt;
&lt;p&gt;Descomprimimos el &lt;em&gt;tarball&lt;/em&gt; y nos situamos en la carpeta recién creada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf Python-2.7.11.tgz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El procedimiento de compilación es el estándar: &lt;strong&gt;configure&lt;/strong&gt;, &lt;strong&gt;make&lt;/strong&gt; y &lt;strong&gt;make install&lt;/strong&gt;. Empezamos por configurarlo. Solo voy a añadir una carpeta que no interfiera con el sistema operativo, por ejemplo, &lt;em&gt;/opt/python27/&lt;/em&gt;. Otro punto interesante es el modificador &lt;strong&gt;--enable-shared&lt;/strong&gt;, para generar la librería &lt;em&gt;libpython2.7.so&lt;/em&gt;, por si nos hiciera falta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/python27
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
...
configure: creating ./config.status
config.status: creating Makefile.pre
config.status: creating Modules/Setup.config
config.status: creating Misc/python.pc
config.status: creating Modules/ld_so_aix
config.status: creating pyconfig.h
config.status: pyconfig.h is unchanged
creating Modules/Setup
creating Modules/Setup.local
creating Makefile
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compilamos usando &lt;strong&gt;make&lt;/strong&gt; con el &lt;em&gt;Makefile&lt;/em&gt; recién generado por el &lt;em&gt;script&lt;/em&gt; &lt;strong&gt;configure&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ make
...
Python build finished, but the necessary bits to build these modules were not found:
_bsddb             _curses            _curses_panel
_sqlite3           _tkinter           bsddb185
bz2                dbm                dl
gdbm               imageop            readline
sunaudiodev
To find the necessary bits, look in setup.py in detect_modules&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the module&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s name.

running build_scripts
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay algunos módulos de la librería estándar que necesitan las versiones &lt;strong&gt;-devel&lt;/strong&gt; de algunas librerías, aunque se pueden obviar y no se construyen.&lt;/p&gt;
&lt;p&gt;Opcionalmente podemos instalar algunas de esas librerías, y tras volver a ejecutar &lt;strong&gt;configure&lt;/strong&gt; y &lt;strong&gt;make&lt;/strong&gt;, se construirían esos módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente lo ponemos en su carpeta (&lt;em&gt;--prefix&lt;/em&gt;) mediante &lt;strong&gt;make install&lt;/strong&gt;. No tengo permiso de escritura en &lt;em&gt;/opt/&lt;/em&gt;, así que vamos a usar &lt;strong&gt;sudo&lt;/strong&gt; para todos los comandos que impliquen la carpeta &lt;em&gt;/opt/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ sudo make install
Creating directory /opt/python27/bin
Creating directory /opt/python27/lib
...
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobar que funciona&lt;/h2&gt;
&lt;p&gt;Vamos a ejecutar el binario &lt;strong&gt;python&lt;/strong&gt; para verificar que funciona y que estamos mirando la versión que toca. Vamos a usar la ruta completa para referirnos al binario, aunque lo ideal sería que estuviera en el &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python -V
Python 2.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ver que la librería estándar funciona y es utilizable, basta con importar alguno de sus módulos e invocar alguna de sus funciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python
Python 2.7.11 &lt;span class="o"&gt;(&lt;/span&gt;default, Mar &lt;span class="m"&gt;29&lt;/span&gt; 2016, 16:42:10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 4.4.7 &lt;span class="m"&gt;20120313&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Red Hat 4.4.7-16&lt;span class="o"&gt;)]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.uname&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; exit&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo damos por bueno.&lt;/p&gt;
&lt;h2&gt;Opcional: reduciendo el espacio ocupado en disco&lt;/h2&gt;
&lt;p&gt;Nos posicionamos en la carpeta para analizar lo que ocupa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos lo que ocupa cada carpeta dentro de la carpeta contendora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
6.1M    bin
94M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paso mas obvio es lanzar el comando &lt;strong&gt;strip&lt;/strong&gt;. Esto va a eliminar los símbolos de &lt;em&gt;debug&lt;/em&gt; y va a reducir el tamaño de los binarios y las librerías &lt;em&gt;.so&lt;/em&gt;. El resto va a ignorarse, previo mensaje de error, que vamos a ignorar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -type f &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs strip 2&amp;gt;/dev/null
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
1.8M    bin
76M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Algo hemos ganado; se han liberado unos 24 mb. Como nos resulta insuficiente, inspeccionemos la carpeta mas grande, que es la carpeta &lt;em&gt;lib/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h
4.0K    lib/pkgconfig
1.8M    lib/libpython2.7.a
74M     lib/python2.7
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La librería &lt;em&gt;libpython2.7.a&lt;/em&gt; es necesaria para compilar estáticamente binarios que vayan a incorporar la librería de &lt;em&gt;python&lt;/em&gt;. En este caso no la necesitamos y podemos liberar 1.8 mb adicionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm lib/libpython2.7.a
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
1.8M    bin
73M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Continuamos mirando la carpeta mas grande, que es &lt;em&gt;lib/python2.7/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/python2.7/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h &lt;span class="p"&gt;|&lt;/span&gt; tail -5
2.9M    lib/python2.7/encodings
3.1M    lib/python2.7/idlelib
3.4M    lib/python2.7/distutils
3.5M    lib/python2.7/lib-dynload
29M     lib/python2.7/test
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es bastante inútil que el &lt;em&gt;runtime&lt;/em&gt; de &lt;em&gt;python&lt;/em&gt; incluya los tests que usan los desarrolladores de &lt;em&gt;python&lt;/em&gt;, y son 29 mb que podemos eliminar de forma segura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm -R lib/python2.7/test/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
1.8M    bin
44M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos el contenido de la carpeta con detenimiento, podemos ver que cada módulo tiene 3 versiones: &lt;em&gt;.py&lt;/em&gt;, &lt;em&gt;.pyc&lt;/em&gt; y &lt;em&gt;.pyo&lt;/em&gt;; se trata del módulo en versión código, compilado y optimizado, respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh lib/python2.7/os.*
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; 16:43 lib/python2.7/os.py
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; 16:43 lib/python2.7/os.pyc
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; 16:43 lib/python2.7/os.pyo
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente solo se necesita la versión &lt;em&gt;.py&lt;/em&gt;, siendo las otras para acelerar la carga del módulo. Los otros se crean al importar el módulo, y si es posible, se escriben de nuevo en la carpeta. Vamos a borrarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
1.8M    bin
21M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mucho mejor, pero... ¿sigue funcionando &lt;strong&gt;python&lt;/strong&gt;? Lo comprobamos como antes, y vemos que si. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -V
Python 2.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -c &lt;span class="s2"&gt;&amp;quot;import os; print os.uname()&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado para usos futuros&lt;/h2&gt;
&lt;p&gt;Esta carpeta va a servir para todas las máquinas &lt;em&gt;CentOS&lt;/em&gt; y &lt;em&gt;RedHat&lt;/em&gt; versión 6, con la misma família de procesador (en este caso x86_64). Hacemos un fichero comprimido y lo ponemos a buen recaudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ tar czf ~/python27.tar.gz python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh ~
total 7.2M
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 7.2M Mar &lt;span class="m"&gt;29&lt;/span&gt; 17:01 python27.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poco mas de 7 mb... nada mal, ¿no?&lt;/p&gt;</summary><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category></entry><entry><title>Sistemas de ficheros multicapa con aufs</title><link href="http://www.linuxsysadmin.tk/2016/03/sistemas-de-ficheros-multicapa-con-aufs.html" rel="alternate"></link><published>2016-03-28T08:00:00+02:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-03-28:2016/03/sistemas-de-ficheros-multicapa-con-aufs.html</id><summary type="html">&lt;p&gt;Trabajando con contenedores tenemos una parte que se repite: el sistema de ficheros base, que copiamos siempre. Otras veces nos puede interesar hacer un sistema capaz de descartar los cambios desde un punto inicial. Podemos crear una capa base de solo lectura y añadir otra capa de cambios con &lt;strong&gt;aufs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es crear un sistema de ficheros que sea el resultado de mezclar otros dos: una capa de solo lectura y una capa de cambios, que podría ser de lectura y escritura. Esta nueva capa puede, a su vez, servir de base para otro sistema de ficheros.&lt;/p&gt;
&lt;p&gt;De hecho, esta técnica de "apilado" se utiliza en la distribución de pendrive llamada &lt;a href="http://www.slax.org/"&gt;Slax&lt;/a&gt;. Mediante el apilado de módulos, mas una capa final de cambios, consiguen crear un sistema de ficheros linux entero, con una capa de cambios que se puede descartar en cualquier momento.&lt;/p&gt;
&lt;p&gt;Empezaremos con un sistema de ficheros simulado en una carpeta, que llamaremos &lt;em&gt;base&lt;/em&gt;. También pondremos una carpeta &lt;em&gt;unified&lt;/em&gt; que va a ser el sistema de ficheros resultante, y una carpeta &lt;em&gt;changes&lt;/em&gt; que va a alojar los cambios del sistema de ficheros respecto al sistema &lt;em&gt;base&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para esta demostración nos vale poca cosa, por ejemplo un binario y su configuración. En casos algo mas complejos podría tratarse de una jaula entera de sistema operativo.&lt;/p&gt;
&lt;p&gt;La "aplicación" y su configuración son simples, se muestran como guía, para ver como lo evolucionamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/bin/hello.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; conf/hello.conf

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear el sistema combinado en la carpeta &lt;em&gt;unified&lt;/em&gt;, usando la &lt;em&gt;base&lt;/em&gt; como capa de solo lectura, y la carpeta &lt;em&gt;changes&lt;/em&gt; como la capa de lectura escritura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -t aufs -o br:changes&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que la carpeta &lt;em&gt;unified&lt;/em&gt; es una unión de la capa base con la de cambios. Puesto que no hay cambios, por ahora las carpetas coinciden en contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahora en adelante, solo queda trabajar con el sistema de ficheros &lt;em&gt;unified&lt;/em&gt;, así que vamos a trabajar en esa carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; unified/
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si ejecutamos el binario, vemos que reacciona como se supone que debe hacerlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un momento dado, vemos que queremos modificar un fichero, por ejemplo, el de configuración, cambiando el parámetro &lt;strong&gt;NAME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# cat conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, el resultado es el esperado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard Monells!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear nuevas carpetas y nuevos ficheros, por ejemplo, una carpeta &lt;em&gt;data&lt;/em&gt; con un fichero &lt;em&gt;greetings&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# mkdir data
root@server:~/unified# ./bin/hello.sh &amp;gt; data/greetings
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Volvemos al nivel de carpetas anteriores, para investigar lo que está pasando.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el sistema &lt;em&gt;base&lt;/em&gt; ha quedado intacto. De la misma forma, todas las modificaciones respecto a la base se han almacenado en la carpeta &lt;em&gt;changes&lt;/em&gt;. En conjunto, nos queda la carpeta &lt;em&gt;unified&lt;/em&gt; con la suma de ambos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified
    ├── bin
    │   └── hello.sh
    ├── conf
    │   └── hello.conf
    └── data
        └── greetings

&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;7&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil intuir que el fichero &lt;em&gt;greetings&lt;/em&gt; es el de la capa de cambios, ya que no hay otro. En el caso del fichero &lt;em&gt;hello.conf&lt;/em&gt; modificado, se ha modificado el de la capa de cambios, y es el que vemos en el punto de montaje &lt;em&gt;unified&lt;/em&gt;, aunque hayan dos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~# cat unified/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~# cat changes/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: el sistema de ficheros de solo lectura &lt;em&gt;base&lt;/em&gt; no tiene porque estar en una carpeta; podría tratarse se un sistema de fichero simulado montado en un fichero, montado mediante un &lt;strong&gt;mount -o loop&lt;/strong&gt;; por ejemplo, un sistema de ficheros &lt;strong&gt;squashfs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, como la capa &lt;em&gt;base&lt;/em&gt; no se modifica, nada nos impide crear otro sistema de ficheros, a base de sumar esta misma &lt;em&gt;base&lt;/em&gt; con otra capa de cambios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir changes2 unified2
root@server:~# mount -t aufs -o br:changes2&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified2
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos dos sistemas de ficheros, &lt;em&gt;unified&lt;/em&gt; y &lt;em&gt;unified2&lt;/em&gt;, que comparten una capa &lt;em&gt;base&lt;/em&gt; común.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
├── changes2
├── unified
│   ├── bin
│   │   └── hello.sh
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified2
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;14&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso no supone mucho ahorro, ya que la capa base es pequeña, pero... ¿os imagináis que la capa base es una jaula entera resultado de un &lt;strong&gt;debootstrap&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;De hecho, esta capa &lt;em&gt;base&lt;/em&gt; compartida no hay que copiarla, con lo que ganamos tiempo al crear una jaula grande, y además, si lo juntamos con &lt;strong&gt;squashfs&lt;/strong&gt; podemos ahorrar bastante espacio.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mount"></category><category term="aufs"></category><category term="squashfs"></category><category term="debootstrap"></category></entry><entry><title>Haciendo snapshots con LVM</title><link href="http://www.linuxsysadmin.tk/2016/02/haciendo-snapshots-con-lvm.html" rel="alternate"></link><published>2016-02-15T08:30:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-02-15:2016/02/haciendo-snapshots-con-lvm.html</id><summary type="html">&lt;p&gt;Una de las funcionalidades mas implementadas en los sistemas de ficheros de nueva generación es la capacidad de hacer &lt;em&gt;snapshots point-in-time&lt;/em&gt;. Sin embargo, no tenemos que renunciar a la estabilidad de los sistemas de ficheros tradicionales como &lt;strong&gt;ext4&lt;/strong&gt;; otras veces no es posible por requisitos del servicio que debe usarlo.&lt;/p&gt;
&lt;p&gt;En este tutorial vamos a demostrar lo fácil que es hacer este tipo de &lt;em&gt;snapshots&lt;/em&gt;, usando como tecnología subyacente el &lt;strong&gt;logical volume manager&lt;/strong&gt;, de ahora en adelante, &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los únicos requisitos para seguir esta guía son el paquete &lt;strong&gt;lvm&lt;/strong&gt; y un disco físico sobre el que vamos a construir el &lt;em&gt;volume group&lt;/em&gt; que va a alojar los &lt;em&gt;logical volumes&lt;/em&gt;; al menos van a ser la partición original y algo de espacio para servir como volumen para el &lt;em&gt;snapshot&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;Empezamos instalando los requisitos software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5
Paquetes sugeridos:
  thin-provisioning-tools
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar 1.530 kB de archivos.
Se utilizarán 3.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suponiendo que el disco que vamos a usar es &lt;em&gt;/dev/sdb&lt;/em&gt;, vamos a acondicionarlo para que pueda actuar como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a usar este &lt;em&gt;physical volume&lt;/em&gt; para crear el &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate lvm /dev/sdb
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;lvm&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a sacar un &lt;em&gt;logical volume&lt;/em&gt; para crear el sistema de ficheros que va a ser el objeto del &lt;em&gt;snapshot&lt;/em&gt;. El tamaño del volumen puede ser el que nos convenga, e incluso crecer según sea necesario. De momento, nos basta con 1 GB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate lvm -L 1G -n datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo formateamos como si de un disco mas se tratara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/lvm/datos
mke2fs 1.42.12 &lt;span class="o"&gt;(&lt;/span&gt;29-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;262144&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;65536&lt;/span&gt; nodos-i

UUID del sistema de ficheros: 1ad4e531-82de-4797-9968-28cb33b3badd
Respaldo del superbloque guardado en los bloques:
        32768, 98304, 163840, 229376

Reservando las tablas de grupo: hecho
Escribiendo las tablas de nodos-i: hecho
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8192&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a asumir que nuestro servicio necesita dejar sus datos en &lt;em&gt;/data&lt;/em&gt;; como no existe, vamos a crearlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /data
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso es montar ese volumen en su sitio, en este caso, en &lt;em&gt;/data&lt;/em&gt;. Se deja como ejercicio personal ponerlo en el &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos /data/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear algo de contenido en la carpeta para simular los datos que dejaría el servicio que supuestamente usaría esta carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/a
root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/b
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del snapshot&lt;/h2&gt;
&lt;p&gt;Hacer un &lt;em&gt;snapshot&lt;/em&gt; es tan fácil como invocar el binario &lt;strong&gt;lvcreate&lt;/strong&gt; con el parámetro &lt;em&gt;-s&lt;/em&gt;, especificando el tamaño, el nombre y el volumen objetivo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate -L 100M -n datos-snap -s /dev/lvm/datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El volumen &lt;em&gt;datos-snap&lt;/em&gt; solo contiene las diferencias con el volumen original, así que no necesita tener el mismo tamaño que el original. Sin embargo, si hubiera mas de 100 MB de cambios, este &lt;em&gt;snapshot&lt;/em&gt; quedaría inválido.&lt;/p&gt;
&lt;p&gt;De momento, creo que con 100 MB va a ser suficiente, ya que solo pretendo sacar un fichero comprimido de ese &lt;em&gt;snapshot&lt;/em&gt;, eliminándolo después. Un tamaño seguro habría sido el mismo que el volumen original. Sin embargo, como se trata de otro volumen &lt;strong&gt;LVM&lt;/strong&gt;, podremos extenderla a posteriori con &lt;em&gt;lvextend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a analizar el contenido; lo montamos en una carpeta cualquiera para ver su contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil de verificar que tienen el mismo contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:1
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a continuar simulando que el servicio escribe en el volumen original, por ejemplo, modificando uno de los ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /data/a
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y verificamos que el &lt;em&gt;snapshot point-in-time&lt;/em&gt; se quedó en el momento temporal en el que lo hicimos, quedando como estaba entonces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:2
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificando los &lt;em&gt;logical volume&lt;/em&gt; con el comando &lt;em&gt;lvs&lt;/em&gt;, vemos que es un volumen de 100 MB, con una ocupación baja, del 0,08%. El &lt;em&gt;snapshot&lt;/em&gt; quedaría inservible si llegara a superar el 100%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV         VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  datos      lvm  owi-aos---   1,00g
  datos-snap lvm  swi-aos--- 100,00m      datos  0,08
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sacando el backup&lt;/h2&gt;
&lt;p&gt;El objetivo inicial era sacar una copia de los datos, congelados en un momento concreto. Tenemos ese momento en el volumen &lt;em&gt;datos-snap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Empezaremos montándolo en alguna carpeta cualquiera, si no lo teníamos ya (lo hemos montado en el punto anterior).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con el volumen montado, el resto es procedimiento estándar. En este caso, vamos a sacar un fichero &lt;em&gt;.tar.gz&lt;/em&gt; con el contenido de la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/
root@server:/mnt# tar cvzf /root/backup.tar.gz *
a
b
root@server:/mnt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente vamos a limpiar el &lt;em&gt;snapshot&lt;/em&gt;, empezando por desmontar el volumen. Como estamos dentro de la carpeta no vamos a poder desmontar el volumen, así que salimos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:/mnt# &lt;span class="nb"&gt;cd&lt;/span&gt;
root@server:~# umount /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora que no lo tenemos montado, lo eliminamos sin problemas con las herramientas propias de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvremove /dev/lvm/datos-snap
Do you really want to remove active logical volume datos-snap? &lt;span class="o"&gt;[&lt;/span&gt;y/n&lt;span class="o"&gt;]&lt;/span&gt;: y
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; successfully removed
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo quedará poner el fichero &lt;em&gt;backup.tar.gz&lt;/em&gt; a buen recaudo.&lt;/p&gt;</summary><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category><category term="snapshot"></category><category term="point-in-time"></category><category term="backup"></category></entry><entry><title>LVM: logical volume manager</title><link href="http://www.linuxsysadmin.tk/2016/01/lvm-logical-volume-manager.html" rel="alternate"></link><published>2016-01-18T09:00:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-01-18:2016/01/lvm-logical-volume-manager.html</id><summary type="html">&lt;p&gt;Cuando eres un usuario medio no te complicas; particionas tu disco, a menudo usando un sistema de particionado guiado e instalas tu sistema operativo favorito. El problema es cuando las particiones se te quedan cortas. Para estos casos, se inventó una tecnología llamada &lt;em&gt;logical volume manager&lt;/em&gt;, usando sus siglas: &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LVM es una implementación de un administrador de volúmenes lógicos para el kernel Linux. Se escribió originalmente en 1998 por Heinz Mauelshagen, que se basó en el administrador de volúmenes de Veritas usado en sistemas HP-UX.&lt;/p&gt;
&lt;p&gt;Lo que hay que saber es que las "particiones" son ahora &lt;em&gt;logical volumes&lt;/em&gt;, que son particiones de un &lt;em&gt;volume group&lt;/em&gt;. A su vez, este &lt;em&gt;volume group&lt;/em&gt; es una agrupación de discos físicos, &lt;em&gt;physical volume&lt;/em&gt; en el argot de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La ventaja de &lt;strong&gt;LVM&lt;/strong&gt; es que podemos redimensionar nuestros &lt;em&gt;logical volumes&lt;/em&gt; (siempre que el sistema de ficheros lo permita) y que podemos añadir y quitar &lt;em&gt;physical volumes&lt;/em&gt; a nuestros &lt;em&gt;volume groups&lt;/em&gt;, a efectos de incrementar su espacio disponible.&lt;/p&gt;
&lt;p&gt;Usos frecuentes para &lt;strong&gt;LVM&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dimensionado de discos en caliente&lt;/li&gt;
&lt;li&gt;Creación de particiones de espacio limitado&lt;/li&gt;
&lt;li&gt;Capacidad para crear &lt;em&gt;snapshots point-in-time&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Partimos de una máquina virtual con cualquier distribución &lt;em&gt;Linux&lt;/em&gt;, por ejemplo &lt;em&gt;Debian&lt;/em&gt;, que dispone de 2 discos adicionales dedicados para &lt;strong&gt;LVM&lt;/strong&gt;. Con uno bastaría, pero ya pongo los dos para tenerlo hecho cuando el tutorial avance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# fdisk -l /dev/sdb

Disco /dev/sdb: &lt;span class="m"&gt;8&lt;/span&gt; GiB, &lt;span class="m"&gt;8589934592&lt;/span&gt; bytes, &lt;span class="m"&gt;16777216&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# fdisk -l /dev/sdc

Disco /dev/sdc: &lt;span class="m"&gt;4&lt;/span&gt; GiB, &lt;span class="m"&gt;4294967296&lt;/span&gt; bytes, &lt;span class="m"&gt;8388608&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los discos que forman un &lt;em&gt;volume group&lt;/em&gt; no necesitan tener el mismo tamaño; así que con uno de 8 GB y otro de 4 GB tendremos bastante.&lt;/p&gt;
&lt;p&gt;Nos aseguramos que tenemos el paquete &lt;strong&gt;lvm2&lt;/strong&gt; instalado, y si no lo estuviera, lo instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar 1.530 kB de archivos.
Se utilizarán 3.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un &lt;em&gt;volume group&lt;/em&gt; con 1 solo disco. Así que primero vamos a preparar &lt;em&gt;/dev/sdb&lt;/em&gt; como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb 
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora creamos un &lt;em&gt;volume group&lt;/em&gt; a partir del nuevo &lt;em&gt;physical volume&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate vg1 /dev/sdb 
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos un &lt;em&gt;volume group&lt;/em&gt; llamado &lt;strong&gt;vg1&lt;/strong&gt; y que dispone de 8 GB, todos ellos libres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- 8,00g 8,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos gustaría que nuestros usuarios tuvieran una partición dedicada, así quedarán limitados en el espacio que pueden usar, sin molestar el resto del sistema operativo. En el argot de &lt;strong&gt;LVM&lt;/strong&gt; se trata de un &lt;em&gt;logical volume&lt;/em&gt;. Lo creamos, por ejemplo de 5 GB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate vg1 -L 5G -n users
  Logical volume &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos la salida de los comandos &lt;strong&gt;lvs&lt;/strong&gt;, &lt;strong&gt;vgs&lt;/strong&gt; y &lt;strong&gt;pvs&lt;/strong&gt;: sin sorpresas. Tenemos un &lt;em&gt;logical volume&lt;/em&gt; de 5 GB, al &lt;em&gt;volume group&lt;/em&gt; le quedan 3 GB igual que al &lt;em&gt;physical volume&lt;/em&gt; subyacente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-a----- 5,00g                                                    
root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- 8,00g 3,00g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  8,00g 3,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sabiendo que ahora tenemos un dispositivo nuevo de 5 GB en &lt;em&gt;/dev/vg1-users&lt;/em&gt;, lo formateamos y lo montamos como cualquier otra partición.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/mapper/vg1-users 
mke2fs 1.42.12 &lt;span class="o"&gt;(&lt;/span&gt;29-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;1310720&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;327680&lt;/span&gt; nodos-i

UUID del sistema de ficheros: 44788452-bbb4-42e3-a5f3-4a1cfa50cabb
Respaldo del superbloque guardado en los bloques: 
    32768, 98304, 163840, 229376, 294912, 819200, 884736

Reservando las tablas de grupo: hecho                           
Escribiendo las tablas de nodos-i: hecho                           
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~# tune2fs -m0 /dev/mapper/vg1-users 
tune2fs 1.42.12 &lt;span class="o"&gt;(&lt;/span&gt;29-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a 0% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
root@server:~# mount /dev/mapper/vg1-users /home/
root@server:~# df -h /home
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   4,8G    10M  4,8G   1% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tal como pasa el tiempo, vemos que los 5 GB de los usuarios se nos quedan cortos y decidimos que necesitan 10 GB. Como el &lt;em&gt;volume group&lt;/em&gt; no tiene 5 GB mas, hay que ampliarlo.&lt;/p&gt;
&lt;p&gt;Así pues, ponemos otro disco en la máquina, lo preparamos como &lt;em&gt;physical volume&lt;/em&gt; y lo asignamos al &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdc
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdc&amp;quot;&lt;/span&gt; successfully created
root@server:~# vgextend vg1 /dev/sdc
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully extended
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda el &lt;em&gt;volume group&lt;/em&gt;: tiene 12 GB y se compone de dos &lt;em&gt;physical volumes&lt;/em&gt;, uno de 8 GB y el otro de 4 GB, aunque para nosotros, el &lt;em&gt;volume group&lt;/em&gt; es una masa uniforme de información, sin importar en que disco cae.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize  VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- 11,99g 6,99g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  8,00g 3,00g
  /dev/sdc   vg1  lvm2 a--  4,00g 4,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya estamos en disposición de reclamar los 10 GB que necesitamos, asó que &lt;strong&gt;extendemos&lt;/strong&gt; el &lt;em&gt;logical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- 5,00g                                                    
root@server:~# lvextend /dev/mapper/vg1-users -L 10G
  Size of logical volume vg1/users changed from 5,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1280&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt; to 10,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2560&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt;.
  Logical volume users successfully resized
root@server:~# lvs
  LV    VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- 10,00g                                                    
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, se han absorbido 2 GB adicionales de cada &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  8,00g    0 
  /dev/sdc   vg1  lvm2 a--  4,00g 1,99g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y un último detalle: a pesar de que la nueva "partición" dispone de 10 GB, el sistema de fichero subyacente no lo sabe, y solo tiene &lt;em&gt;inodos&lt;/em&gt; para indexar 5 GB de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   4,8G    10M  4,8G   1% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por suerte para nosotros, el sistema de ficheros usado es &lt;em&gt;ext4&lt;/em&gt;, que nos permite redimensionarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# resize2fs /dev/mapper/vg1-users 
resize2fs 1.42.12 &lt;span class="o"&gt;(&lt;/span&gt;29-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
El sistema de ficheros de /dev/mapper/vg1-users está montado en /home&lt;span class="p"&gt;;&lt;/span&gt; hace falta cambiar el tamaño en línea
&lt;span class="nv"&gt;old_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1, &lt;span class="nv"&gt;new_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
The filesystem on /dev/mapper/vg1-users is now &lt;span class="m"&gt;2621440&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;4k&lt;span class="o"&gt;)&lt;/span&gt; blocks long.

root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto, el sistema de ficheros de &lt;em&gt;/home&lt;/em&gt; ya tiene el nuevo tamaño disponible y listo para usar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   9,8G    12M  9,7G   1% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda listo. Para hacer el montaje permanente, basta con añadir la línea adecuada a &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category></entry><entry><title>Empaquetando ficheros .deb</title><link href="http://www.linuxsysadmin.tk/2015/12/empaquetando-ficheros-punto-deb.html" rel="alternate"></link><published>2015-12-28T10:00:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-12-28:2015/12/empaquetando-ficheros-punto-deb.html</id><summary type="html">&lt;p&gt;Una de las grandes ventajas de &lt;em&gt;linux&lt;/em&gt; es su sistema de paquetes. Con ellos es posible instalar de forma fácil un paquete de forma fácil y confiable. Hoy vamos a hacer un paquete &lt;em&gt;.deb&lt;/em&gt; como ejemplo que instale un &lt;em&gt;script&lt;/em&gt; cualquiera en la carpeta &lt;em&gt;/usr/bin/&lt;/em&gt; para su uso cotidiano.&lt;/p&gt;
&lt;p&gt;Por limpieza, vamos a crear una carpeta temporal para hacer el empaquetado, desde donde vamos a ejecutar todo el resto del procedimiento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# mkdir workspace
root@packager:~# &lt;span class="nb"&gt;cd&lt;/span&gt; workspace/
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparación de la estructura del paquete&lt;/h2&gt;
&lt;p&gt;Vamos a poner el &lt;em&gt;script&lt;/em&gt; que queramos empaquetar, respetando al estructura que tendrá una vez se instale el paquete. También le damos los permisos que va a tener una vez instalado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p usr/bin
root@packager:~/workspace# cat usr/bin/welcome
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
root@packager:~/workspace# chmod &lt;span class="m"&gt;755&lt;/span&gt; usr/bin/welcome
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado de la carpeta de trabajo&lt;/h2&gt;
&lt;p&gt;Antes de empaquetar de acuerdo a las políticas de los paquetes &lt;em&gt;.deb&lt;/em&gt;, sea en &lt;em&gt;Debian&lt;/em&gt; o en &lt;em&gt;Ubuntu&lt;/em&gt;, se requiere de una carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; con un fichero &lt;strong&gt;control&lt;/strong&gt;, que va a contener los metadatos del paquete.&lt;/p&gt;
&lt;p&gt;Para este fichero nos podemos guiar por la &lt;a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html"&gt;documentación oficial&lt;/a&gt;. Como vamos a hacer un paquete mínimo, vamos a poner solamente los campos obligatorios y uno de los opcionales, que indicarán las necesidades de nuestro script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obligatorios&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Architecture compilado los binarios&lt;/li&gt;
&lt;li&gt;Maintainer&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opcionales&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Depends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para que el &lt;em&gt;script&lt;/em&gt; pueda funcionar, hay que localizar todo aquello que pueda necesitar, y añadirlo al paquete o declarar los paquetes de los que dependa, para que se puedan instalar automáticamente si no estuvieran en el sistema destino.&lt;/p&gt;
&lt;p&gt;Concretamente, este &lt;em&gt;script&lt;/em&gt; necesita dos comandos para funcionar: &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;echo&lt;/strong&gt;. Vamos a localizarlos a ver de que paquete provienen. La idea es que nuestro paquete va a necesitar todos los paquetes que contengan los comandos necesarios, sin necesidad de incorporarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# which bash
/bin/bash
root@packager:~/workspace# dpkg -S /bin/bash
bash: /bin/bash
root@packager:~/workspace# which &lt;span class="nb"&gt;echo&lt;/span&gt;
/bin/echo
root@packager:~/workspace# dpkg -S /bin/echo 
coreutils: /bin/echo
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahí deducimos que necesitamos los paquetes &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;coreutils&lt;/strong&gt;, que aunque suelen venir de serie, vale la pena declararlos por si no fuera el caso. Esto es lo que va en el campo &lt;strong&gt;Depends&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reuniendo estos datos, podemos crear el fichero &lt;strong&gt;control&lt;/strong&gt;, por ejemplo, como este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p DEBIAN
root@packager:~/workspace# cat DEBIAN/control 
Package: welcome
Version: 1.0-1
Architecture: all
Maintainer: Linux Sysadmin
Description: A fancy shell script
 To demonstrate how to package a .deb file
Depends: bash, coreutils
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adicionalmente, la carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; puede contener otros &lt;em&gt;scripts&lt;/em&gt;, como por ejemplo, &lt;strong&gt;preinst&lt;/strong&gt;, &lt;strong&gt;postinst&lt;/strong&gt;, &lt;strong&gt;prerm&lt;/strong&gt; y &lt;strong&gt;postrm&lt;/strong&gt;, que podrían, por ejemplo, crear los usuarios necesarios.&lt;/p&gt;
&lt;p&gt;Como último paso, vamos a invocar el comando &lt;strong&gt;dpkg-deb&lt;/strong&gt; para empaquetar la carpeta de trabajo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@packager:~# dpkg-deb --build workspace/ welcome_1.0-1_all.deb
dpkg-deb: construyendo el paquete &lt;span class="sb"&gt;`&lt;/span&gt;welcome&lt;span class="s1"&gt;&amp;#39; en `welcome_1.0-1_all.deb&amp;#39;&lt;/span&gt;.
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de que el paquete funciona&lt;/h2&gt;
&lt;p&gt;Vamos a comprobar que el paquete no está instalado, por ejemplo buscando el &lt;em&gt;script&lt;/em&gt; que hemos empaquetado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
root@packager:~# welcome 
bash: /usr/bin/welcome: No existe el fichero o el directorio
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, no lo está; ahora se trata de invocar &lt;strong&gt;dpkg&lt;/strong&gt; para instalar nuestro paquete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# dpkg -i welcome_1.0-1_all.deb 
Seleccionando el paquete welcome previamente no seleccionado.
&lt;span class="o"&gt;(&lt;/span&gt;Leyendo la base de datos ... &lt;span class="m"&gt;9984&lt;/span&gt; ficheros o directorios instalados actualmente.&lt;span class="o"&gt;)&lt;/span&gt;
Preparando para desempaquetar welcome_1.0-1_all.deb ...
Desempaquetando welcome &lt;span class="o"&gt;(&lt;/span&gt;1.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando welcome &lt;span class="o"&gt;(&lt;/span&gt;1.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente, verificamos que tenemos nuestro &lt;em&gt;script&lt;/em&gt; en &lt;em&gt;/usr/bin/&lt;/em&gt; como esperábamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
/usr/bin/welcome
root@packager:~# welcome
Hello world!
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro paquete que podemos poner a buen recaudo.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="ubuntu"></category><category term="paquete"></category><category term=".deb"></category></entry><entry><title>Creación de un livecd con Debian</title><link href="http://www.linuxsysadmin.tk/2015/12/creacion-de-un-livecd-con-debian.html" rel="alternate"></link><published>2015-12-02T12:30:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-12-02:2015/12/creacion-de-un-livecd-con-debian.html</id><summary type="html">&lt;p&gt;Tras ver como las actualizaciones de mis máquinas virtuales &lt;em&gt;VirtualBox&lt;/em&gt; expandían mis discos &lt;em&gt;.vdi&lt;/em&gt; sin control, quise pasar la herramienta &lt;em&gt;zerofree&lt;/em&gt; y un compactado con la herramienta oficial &lt;em&gt;VBoxManage&lt;/em&gt;. No quería instalar &lt;em&gt;zerofree&lt;/em&gt; de forma permanente y no pude encontrar un &lt;em&gt;livecd&lt;/em&gt; que lo tuviera, así que decidí crear uno.&lt;/p&gt;
&lt;p&gt;Para conseguirlo, se va a usar un sistema de ficheros creado con &lt;em&gt;debootstrap&lt;/em&gt; y compactado mediante &lt;em&gt;SquashFS&lt;/em&gt;; este sistema de ficheros se va a empaquetar en un &lt;em&gt;.iso&lt;/em&gt; junto con un &lt;em&gt;kernel&lt;/em&gt;, un &lt;em&gt;initrd&lt;/em&gt; y el bootloader &lt;em&gt;isolinux&lt;/em&gt;. La herramienta que hace eso es &lt;em&gt;genisoimage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este tutorial se ejecutó en una distribución &lt;em&gt;Debian&lt;/em&gt;, pero no hay ningún problema en hacerlo en una &lt;em&gt;Ubuntu&lt;/em&gt; u otra distribución, siempre que sepamos como crear la imagen base para empaquetar.&lt;/p&gt;
&lt;h2&gt;Preparación del entorno&lt;/h2&gt;
&lt;p&gt;Todo el proceso va a ser ejecutado con el usuario &lt;em&gt;root&lt;/em&gt; por comodidad.&lt;/p&gt;
&lt;p&gt;Empezaremos por instalar todas las tecnologías que hemos mencionado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install debootstrap isolinux squashfs-tools genisoimage
...
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una carpeta de trabajo para contener todos los ficheros temporales y el producto final, por limpieza:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# mkdir live_boot
root@desktop:~# &lt;span class="nb"&gt;cd&lt;/span&gt; live_boot
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todos los comandos que se detallan a continuación se hacen desde dentro de esta carpeta.&lt;/p&gt;
&lt;h2&gt;Preparación del sistema de ficheros, el kernel y el initrd&lt;/h2&gt;
&lt;p&gt;El sistema de ficheros se hace a partir de una jaula estándar de una distribución normal. En este paso, las distribuciones que usan &lt;em&gt;debootstrap&lt;/em&gt; nos facilitan mucho las cosas (aunque esta es la operación mas larga de este tutorial):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase jessie chroot
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
...
I: Base system installed successfully.
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora se trata de preparar esta jaula con los paquetes que necesitemos y las configuraciones adecuadas. Vamos a montar los pseudo sistemas de ficheros &lt;em&gt;/proc&lt;/em&gt;, &lt;em&gt;/sys&lt;/em&gt;, &lt;em&gt;/dev&lt;/em&gt; y &lt;em&gt;/dev/pts&lt;/em&gt;, que posiblemente nos van a hacer falta cuando estemos dentro de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /proc/ chroot/proc/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /sys/ chroot/sys/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/ chroot/dev/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/pts/ chroot/dev/pts/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entramos en la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# chroot chroot
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, y hasta nuevo aviso, todos los comandos se hacen &lt;strong&gt;dentro&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Antes de nada, vamos a asignar una password al usuario &lt;em&gt;root&lt;/em&gt;, porque sino, no vamos a poder entrar en el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# passwd    
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Asignamos el nombre de máquina que mostrará el &lt;em&gt;livecd&lt;/em&gt; una vez haya hecho el &lt;em&gt;boot&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zerofree&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el &lt;em&gt;livecd&lt;/em&gt; pueda hacer &lt;em&gt;boot&lt;/em&gt;, vamos a necesitar el paquete &lt;strong&gt;live-boot&lt;/strong&gt; y un &lt;em&gt;kernel&lt;/em&gt; adecuado a la máquina que va a usar el &lt;em&gt;livecd&lt;/em&gt;. El paquete del &lt;em&gt;kernel&lt;/em&gt; ya nos va a dotar de un &lt;em&gt;initrd&lt;/em&gt; que también vamos a necesitar para el &lt;em&gt;livecd&lt;/em&gt;. Este paso también tarda un poco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install linux-image-486 live-boot
Reading package lists... Done
Building dependency tree... Done
...
Setting up linux-image-3.16.0-4-586 &lt;span class="o"&gt;(&lt;/span&gt;3.16.7-ckt11-1+deb8u3&lt;span class="o"&gt;)&lt;/span&gt; ...
...  
/etc/kernel/postinst.d/initramfs-tools:
update-initramfs: Generating /boot/initrd.img-3.16.0-4-586
...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a instalar los paquetes que queramos en el &lt;em&gt;livecd&lt;/em&gt;; yo voy a poner &lt;em&gt;zerofree&lt;/em&gt; que es la herramienta que motivó este &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install zerofree
...
Unpacking zerofree &lt;span class="o"&gt;(&lt;/span&gt;1.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up zerofree &lt;span class="o"&gt;(&lt;/span&gt;1.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Para reducir el tamaño final, voy a limpiar todos los archivos temporales que usa &lt;em&gt;apt&lt;/em&gt;, tanto los archivos &lt;em&gt;.deb&lt;/em&gt; en &lt;em&gt;/var/cache/apt&lt;/em&gt;, como las listas de paquetes disponibles en &lt;em&gt;/var/lib/apt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# cat /dev/null &amp;gt; /etc/apt/sources.list
root@desktop:/# apt-get update
Reading package lists... Done
root@desktop:/# apt-get clean 
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente salimos de la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, todos los comandos se hacen &lt;strong&gt;fuera&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Vamos a desmontar los pseudo sistemas de ficheros que ya no son necesarios, y que van a molestar cuando compactemos la jaula. Como apunte, la jaula había levantado un proceso &lt;em&gt;/usr/sbin/uuidd&lt;/em&gt; que evitaba desmontar &lt;em&gt;chroot/dev&lt;/em&gt;, por lo que tuve que finalizar el proceso con un &lt;em&gt;kill&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# umount chroot/dev/pts/
root@desktop:~/live_boot# umount chroot/dev/
root@desktop:~/live_boot# umount chroot/sys/
root@desktop:~/live_boot# umount chroot/proc/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Sabiendo que mis máquinas virtuales son clones y el comando que va a correr siempre el comando &lt;em&gt;zerofree&lt;/em&gt; contra el disco &lt;em&gt;/dev/sda1&lt;/em&gt;, se puede poner los comandos en el &lt;em&gt;.bash_history&lt;/em&gt; de &lt;em&gt;root&lt;/em&gt; para poderlos recuperar mediante el uso de flechas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat chroot/root/.bash_history 
zerofree /dev/sda1
poweroff
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetando la imagen&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta contenedora, que va a servir como raíz del &lt;em&gt;livecd&lt;/em&gt;. Dentro le vamos a poner una carpeta &lt;em&gt;live&lt;/em&gt; (para el sistema de ficheros, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt;) y una carpeta &lt;em&gt;isolinux&lt;/em&gt; (para todo lo referente al &lt;em&gt;bootloader&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mkdir -p image/&lt;span class="o"&gt;{&lt;/span&gt;live,isolinux&lt;span class="o"&gt;}&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner el sistema de ficheros en formato &lt;em&gt;SquashFS&lt;/em&gt;. Como apunte, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt; (ambos en la carpeta &lt;em&gt;/boot&lt;/em&gt;) se excluyen porque el &lt;em&gt;bootloader&lt;/em&gt; es incapaz de leerlos de allí; así que los copiamos a la misma carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mksquashfs chroot image/live/filesystem.squashfs -e boot
Parallel mksquashfs: Using &lt;span class="m"&gt;1&lt;/span&gt; processor
Creating 4.0 filesystem on image/live/filesystem.squashfs, block size 131072.
...  
root@desktop:~/live_boot# cp chroot/boot/vmlinuz-3.16.0-4-586 image/live/vmlinuz
root@desktop:~/live_boot# cp chroot/boot/initrd.img-3.16.0-4-586 image/live/initrd
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos con el &lt;em&gt;bootloader&lt;/em&gt;. Lo primero es poner una configuración para saber qué menú nos va a mostrar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat image/isolinux/isolinux.cfg 
UI menu.c32

prompt 0
menu title Debian Zerofree

timeout 50

label Debian Live 3.16.0-4-586
menu label ^Debian Live 3.16.0-4-586
menu default
kernel /live/vmlinuz
append &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/live/initrd &lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;live
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copiamos la imagen del &lt;em&gt;bootloader&lt;/em&gt; &lt;strong&gt;isolinux&lt;/strong&gt; y los módulos que se necesitan, tanto porque nuestra configuración los usa o porque se usan desde otros módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cp /usr/lib/ISOLINUX/isolinux.bin image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/ldlinux.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/menu.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/libutil.c32 image/isolinux/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente empaquetamos la imagen &lt;em&gt;.iso&lt;/em&gt;. Para ello usaremos la herramienta &lt;em&gt;genisoimage&lt;/em&gt; en la carpeta raíz de lo que sería el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# &lt;span class="nb"&gt;cd&lt;/span&gt; image/
root@desktop:~/live_boot/image# genisoimage -rational-rock -volid &lt;span class="s2"&gt;&amp;quot;Debian Zerofree&amp;quot;&lt;/span&gt; -cache-inodes -joliet -full-iso9660-filenames -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size &lt;span class="m"&gt;4&lt;/span&gt; -boot-info-table -output ../debian-zerofree.iso .
I: -input-charset not specified, using utf-8 &lt;span class="o"&gt;(&lt;/span&gt;detected in locale settings&lt;span class="o"&gt;)&lt;/span&gt;
Size of boot image is &lt;span class="m"&gt;4&lt;/span&gt; sectors -&amp;gt; No emulation
  9.24% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:43 2015
 18.48% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:38 2015
 27.69% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:36 2015
 36.94% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:38 2015
 46.15% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:37 2015
 55.40% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:36 2015
 64.61% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:37 2015
 73.85% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:37 2015
 83.07% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:37 2015
 92.30% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; 12:06:38 2015
Total translation table size: 2048
Total rockridge attributes bytes: 1335
Total directory bytes: 4570
Path table size&lt;span class="o"&gt;(&lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;: 38
Max brk space used 1a000
&lt;span class="m"&gt;54178&lt;/span&gt; extents written &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;105&lt;/span&gt; MB&lt;span class="o"&gt;)&lt;/span&gt;
root@desktop:~/live_boot/image# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestra imagen &lt;em&gt;.iso&lt;/em&gt; queda en la carpeta de trabajo, junto a la jaula y a la estructura del &lt;em&gt;livecd&lt;/em&gt;. Solo necesitamos la imagen &lt;em&gt;.iso&lt;/em&gt;, pero podemos dejar los ficheros intermedios hasta que estemos satisfechos con la imagen; es mas fácil modificar la jaula, el empaquetado &lt;em&gt;filesystem.squashfs&lt;/em&gt; y la imagen &lt;em&gt;.iso&lt;/em&gt; que volver a hacer un &lt;em&gt;debootstrap&lt;/em&gt; entero...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# ls -lh
total 106M
drwxr-xr-x &lt;span class="m"&gt;20&lt;/span&gt; root root 4,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; 11:30 chroot
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; root root 106M dic  &lt;span class="m"&gt;2&lt;/span&gt; 12:06 debian-zerofree.iso
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; root root 4,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; 11:53 image
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Copiando esta imagen &lt;em&gt;.iso&lt;/em&gt; a mi máquina con &lt;em&gt;VirtualBox&lt;/em&gt; y montándola antes de hacer el &lt;em&gt;boot&lt;/em&gt; de cada máquina, puedo usar la herramienta &lt;em&gt;zerofree&lt;/em&gt; libremente, sin instalarla en las máquinas virtuales. Tras ello, el compactado de los ficheros &lt;em&gt;.vdi&lt;/em&gt; libera los megabytes a cientos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@virtualbox:~/VirtualBox VMs$ VBoxManage modifyvdi Debian/Debian.vdi --compact
...
gerard@virtualbox:~/VirtualBox VMs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso concreto, la máquina &lt;strong&gt;Debian&lt;/strong&gt; (&lt;em&gt;netinstall&lt;/em&gt;) volvió a ocupar 700 mb, que es mucho mas interesante teniendo en cuenta que es la imagen que suelo clonar para hacer otras máquinas virtuales.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="zerofree"></category><category term="debootstrap"></category><category term="squashfs"></category><category term="genisoimage"></category><category term="isolinux"></category><category term="iso"></category><category term="livecd"></category></entry><entry><title>Creando sistemas de ficheros temporales con tmpfs</title><link href="http://www.linuxsysadmin.tk/2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html" rel="alternate"></link><published>2015-11-16T23:15:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-11-16:2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html</id><summary type="html">&lt;p&gt;A veces nos podemos encontrar con un sistema de ficheros lleno que no nos permite completar alguna acción por falta de espacio en disco. En un caso así, existe la posibilidad de sacar un sistema de ficheros completo de memoria, de una forma temporal, usando el sistema de ficheros &lt;em&gt;tmpfs&lt;/em&gt;. Otra opción es la de tener un sistema de ficheros temporal, en donde podamos dejar ficheros cuya persistencia no sea necesaria entre reinicios.&lt;/p&gt;
&lt;p&gt;El primer paso es tener un &lt;em&gt;punto de montaje&lt;/em&gt;, que sea la carpeta en la que se va a montar el nuevo sistema de fichero. Por ejemplo podemos usar el punto de montaje &lt;em&gt;/mnt/auxiliar&lt;/em&gt;; empezaremos creándolo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observemos como la carpeta creada se construye sobre el mismo dispositivo que la partición raíz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        2,0G   640M  1,2G  35% /
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando el sistema de ficheros de forma temporal&lt;/h2&gt;
&lt;p&gt;Como prueba de concepto, podemos crear este sistema de ficheros de forma temporal. En caso de no salir bien, los efectos no serían permanentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -o &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M -t tmpfs auxiliar /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver como la carpeta pertenece ahora a un sistema de ficheros nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
auxiliar            100M      &lt;span class="m"&gt;0&lt;/span&gt;  100M   0% /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando nos cansemos del nuevo sistema de ficheros, haya cumplido con su utilidad y ya no necesitemos su contenido, la podemos desmontar; vamos a perder todos los ficheros dentro del sistema de ficheros temporal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# umount /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Haciendo el cambio permanente&lt;/h2&gt;
&lt;p&gt;Si nos interesa que este sistema de fichero se &lt;em&gt;monte&lt;/em&gt; y se &lt;em&gt;desmonte&lt;/em&gt; cada vez que la máquina se inicie y se apague, basta con usar el mecanismo estándar de todo sistema de ficheros &lt;em&gt;Linux&lt;/em&gt;: el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;. Basta con añadir una línea nueva con las especificaciones de este punto de montaje, por ejemplo en el final del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tail -1 /etc/fstab 
auxiliar /mnt/auxiliar tmpfs &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M &lt;span class="m"&gt;0&lt;/span&gt; 0
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este cambio es suficiente para las sesiones venideras. En caso de querer disponer inmediatamente del sistema de ficheros podemos solicitar el montaje con un comando &lt;em&gt;mount&lt;/em&gt; normal, comando que va a usar las especificaciones del fichero &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda completado nuestro objetivo.&lt;/p&gt;</summary><category term="linux"></category><category term="tmpfs"></category></entry><entry><title>Escribiendo units en systemd</title><link href="http://www.linuxsysadmin.tk/2015/11/escribiendo-units-en-systemd.html" rel="alternate"></link><published>2015-11-09T22:30:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-11-09:2015/11/escribiendo-units-en-systemd.html</id><summary type="html">&lt;p&gt;Cuando se anunció &lt;em&gt;systemd&lt;/em&gt; me llamó la atención que además de las funciones estándares de otros sistemas de &lt;em&gt;init&lt;/em&gt; (por ejemplo &lt;em&gt;sysvinit&lt;/em&gt;), también se ofrecían otras funcionalidades normalmente delegadas a otros procesos, como por ejemplo, la posibilidad de reiniciar procesos automáticamente o de lanzar procesos temporales al estilo de &lt;em&gt;cron&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo se explica como escribir estos ficheros que rigen las tareas propias del sistema &lt;em&gt;init&lt;/em&gt; para iniciar procesos que no disponen de tales facilidades. Adicionalmente, vamos a ver como beneficiarnos del sistema de plantillas de estos mismos ficheros para evitarnos tener que repetirnos, de acuerdo con el principio &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY (don't repeat yourself)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como ejemplo, vamos a utilizar un sistema básico de &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;; que podría ser &lt;em&gt;RedHat 7&lt;/em&gt;, &lt;em&gt;ArchLinux&lt;/em&gt; o &lt;em&gt;Debian 8&lt;/em&gt;. En este caso, se va a utilizar un sistema &lt;em&gt;Debian Jessie&lt;/em&gt; con una instalación básica &lt;em&gt;netinstall&lt;/em&gt; con &lt;em&gt;SSH&lt;/em&gt; y nada mas.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que queremos montar un servidor con 2 instancias de &lt;em&gt;MongoDB&lt;/em&gt;, escuchando en los puertos 27001 y 27002. Empecemos con montar una estructura en &lt;em&gt;/opt/&lt;/em&gt; para contener todo lo relacionado con este despliegue. La idea es que vamos a levantar el binario &lt;em&gt;mongod&lt;/em&gt; con dos configuraciones distintas. Por eso, de momento basta con poner el binario &lt;em&gt;mongod&lt;/em&gt;, las dos configuraciones y las dos carpetas de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree /opt/
/opt/
└── mongodb
    ├── bin
    │   └── mongod
    ├── conf
    │   ├── mongo1.conf
    │   └── mongo2.conf
    ├── data
    │   ├── mongo1
    │   └── mongo2
    └── logs

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración de ambos procesos va a ser la mínima necesaria para que los procesos no entren en conflicto entre ellos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/mongodb/conf/mongo1.conf 
systemLog:
    path: /opt/mongodb/logs/mongo1.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: 27001

storage:
    dbPath: /opt/mongodb/data/mongo1
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# cat /opt/mongodb/conf/mongo2.conf 
systemLog:
    path: /opt/mongodb/logs/mongo2.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: 27002

storage:
    dbPath: /opt/mongodb/data/mongo2
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como apunte importante, no se ha definido un archivo para guardar el &lt;em&gt;PID&lt;/em&gt; del proceso; &lt;em&gt;systemd&lt;/em&gt; no lo necesita y conoce el &lt;em&gt;PID&lt;/em&gt; de los procesos que levanta.&lt;/p&gt;
&lt;p&gt;Siguiendo las directivas de seguridad mínimas, los dos procesos &lt;em&gt;mongod&lt;/em&gt; van a levantarse con un usuario estándar que no sea &lt;em&gt;root&lt;/em&gt;. En este caso, toda la carpeta &lt;em&gt;/opt/mongodb/&lt;/em&gt; pertenece al usuario &lt;em&gt;mongo&lt;/em&gt;, aunque bastaría con la carpeta de datos y la de logs.&lt;/p&gt;
&lt;p&gt;Ponemos la definición de nuestras &lt;strong&gt;units&lt;/strong&gt; en la carpeta designada según el estándar, que es &lt;em&gt;/etc/systemd/system/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongo1.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo1/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo1.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# cat /etc/systemd/system/mongo2.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo2/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo2.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente interesante ver que el lenguaje de la &lt;strong&gt;units&lt;/strong&gt; de &lt;em&gt;systemd&lt;/em&gt; es declarativo, y que no son &lt;em&gt;init scripts&lt;/em&gt;; &lt;em&gt;systemd&lt;/em&gt; se encarga de todo por nosotros. Basta con declarar el comando con el que levantar el servicio y el usuario con el que hacerlo.&lt;/p&gt;
&lt;p&gt;La directiva &lt;strong&gt;WantedBy&lt;/strong&gt; indica que se tiene que levantar con el &lt;strong&gt;target&lt;/strong&gt; &lt;em&gt;multi-user&lt;/em&gt;, que es el que usa &lt;em&gt;Debian&lt;/em&gt; por defecto. Un &lt;strong&gt;target&lt;/strong&gt; viene a ser el equivalente a un &lt;em&gt;runlevel&lt;/em&gt; de &lt;em&gt;sysvinit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay una directiva &lt;strong&gt;ExecStartPre&lt;/strong&gt; que se encarga de eliminar el &lt;em&gt;lock file&lt;/em&gt; de &lt;em&gt;MongoDB&lt;/em&gt; por si el proceso hubiera acabado de forma inesperada. El binario &lt;em&gt;mongod&lt;/em&gt; no levanta si este fichero existe, ya que cree que ya hay una instancia de &lt;em&gt;mongod&lt;/em&gt; usando la carpeta de datos.&lt;/p&gt;
&lt;p&gt;El resto de directivas se limitan a modificar los límites de los procesos a levantar, de acuerdo a la documentación de &lt;em&gt;MongoDB&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir de ahora, son &lt;strong&gt;units&lt;/strong&gt; normales del sistema y se pueden activar e iniciar. Si ya estuvieran cargados, habría que recargar la configuración de &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo1
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo2
root@server:~# systemctl start mongo1
root@server:~# systemctl start mongo2
root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso de plantillas para evitar repetirnos&lt;/h2&gt;
&lt;p&gt;Toda &lt;strong&gt;unit&lt;/strong&gt; cuyo nombre acabe en &lt;strong&gt;arroba&lt;/strong&gt; seguido por &lt;em&gt;.service&lt;/em&gt; o cualquier otro tipo de &lt;strong&gt;unit&lt;/strong&gt;, es por convención, una &lt;strong&gt;plantilla&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que vamos a crear un &lt;em&gt;link&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt;, que ponga un texto detrás de la &lt;strong&gt;arroba&lt;/strong&gt;. Este texto va a estar disponible en la plantilla como &lt;strong&gt;%i&lt;/strong&gt;. De esta forma podemos "pasar un parámetro" a la plantilla, usando ese parámetro como diferenciador de los dos procesos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Veamos un ejemplo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creamos dos &lt;em&gt;links&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt; &lt;em&gt;mongodb@.service&lt;/em&gt;, con los nombres &lt;em&gt;mongodb@mongo1.service&lt;/em&gt; y &lt;em&gt;mongodb@mongo2.service&lt;/em&gt;, que son nuestras instancias. Estas instancias se rigen con las directivas de la &lt;strong&gt;plantilla&lt;/strong&gt;, con la variable &lt;strong&gt;%i&lt;/strong&gt; conteniendo los valores &lt;em&gt;mongo1&lt;/em&gt; y &lt;em&gt;mongo2&lt;/em&gt; respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -l /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;*
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; 12:46 /etc/systemd/system/mongodb@mongo1.service -&amp;gt; mongodb@.service
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; 12:46 /etc/systemd/system/mongodb@mongo2.service -&amp;gt; mongodb@.service
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;207&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; 12:45 /etc/systemd/system/mongodb@.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora redactamos la plantilla, teniendo en cuenta los valores que se van a cambiarse por la variable &lt;strong&gt;%i&lt;/strong&gt;, que vamos a usar para identificar el fichero de configuración de cada instancia. También es posible poner otras variables en la &lt;strong&gt;plantilla&lt;/strong&gt;, como por ejemplo, el nombre de la máquina o la versión del &lt;em&gt;kernel&lt;/em&gt; de la máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64000
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/%i/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/%i.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo falta activar las instancias e iniciarlas, con los comandos habituales del demonio &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo1
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo1.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo2
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo2.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl start mongodb@mongo1
root@server:~# systemctl start mongodb@mongo2
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo hemos conseguido.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="mongodb"></category></entry><entry><title>Restart automático de servicios con systemd</title><link href="http://www.linuxsysadmin.tk/2015/11/restart-automatico-de-servicios-con-systemd.html" rel="alternate"></link><published>2015-11-05T22:30:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-11-05:2015/11/restart-automatico-de-servicios-con-systemd.html</id><summary type="html">&lt;p&gt;Cuando estamos gestionando un servidor, es posible que se caiga alguno de sus servicios. Esto es especialmente molesto cuando nos interesa tener un &lt;em&gt;uptime&lt;/em&gt; elevado. Para conseguirlo, se han utilizado diferentes maneras, desde poner personas a monitorizar en modo 24x7 hasta herramientas auxiliares como gestores tipo &lt;em&gt;runit&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; o &lt;em&gt;monit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Con la entrada en escena de &lt;em&gt;systemd&lt;/em&gt; en la mayoría de distribuciones grandes de &lt;em&gt;linux&lt;/em&gt; este problema se ha acabado; el mismo proceso que hace de &lt;strong&gt;init&lt;/strong&gt; puede encargarse de mantener los procesos levantados, y reiniciarlos en caso de caída.&lt;/p&gt;
&lt;p&gt;En este tutorial pretendo hacer que un servicio estándar se vea beneficiado de un &lt;strong&gt;override&lt;/strong&gt;, que permita el inicio automático de un servicio cuando se cae, sin tener que reescribir la &lt;strong&gt;unit&lt;/strong&gt; que se encarga del servicio o proceso.&lt;/p&gt;
&lt;p&gt;Partimos de un servidor básico &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;. En este caso vamos a utilizar la última versión estable de &lt;em&gt;Debian&lt;/em&gt;, a la que le vamos a instalar un servicio estándar como &lt;em&gt;nginx&lt;/em&gt; que nos va a servir como conejillo de indias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install nginx-light
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Procedimiento&lt;/h2&gt;
&lt;p&gt;Como comprobación previa, observemos como este &lt;strong&gt;restart&lt;/strong&gt; automático no funciona; tenemos el servicio en ejecución, lo matamos y observamos que no se levanta de nuevo, por mucho que esperemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;685&lt;/span&gt;  0.0  0.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2240&lt;/span&gt; pts/0    S+   11:41   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;662&lt;/span&gt;  0.0  0.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1856&lt;/span&gt; ?        Ss   11:41   0:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;663&lt;/span&gt;  0.1  0.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    11:41   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;664&lt;/span&gt;  0.0  0.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    11:41   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;665&lt;/span&gt;  0.0  0.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    11:41   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;666&lt;/span&gt;  0.1  0.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    11:41   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; 662
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;691&lt;/span&gt;  0.0  0.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2220&lt;/span&gt; pts/0    S+   11:41   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora necesitamos localizar el nombre de la &lt;strong&gt;unit&lt;/strong&gt; que se encarga de ese servicio, puesto que la carpeta de &lt;strong&gt;overrides&lt;/strong&gt; debe llamarse igual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl list-units -a &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
  nginx.service    loaded    inactive dead    A high performance web server and a reverse proxy server
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, este fichero se encuentra en &lt;em&gt;/lib/systemd/system/&lt;/em&gt;, siguiendo las convenciones del empaquetado de &lt;em&gt;Debian&lt;/em&gt;. Alternativamente, podemos localizar los ficheros instalados por un paquete con el comando &lt;em&gt;dpkg -L nginx-light&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -lh /lib/systemd/system/nginx.service 
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;986&lt;/span&gt; dic  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;2014&lt;/span&gt; /lib/systemd/system/nginx.service
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de ser una &lt;strong&gt;unit&lt;/strong&gt; escrita por nosotros, se encontraría en &lt;em&gt;/etc/systemd/system/&lt;/em&gt;. Esta es la convención:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/lib/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; de sistema, puestas por los paquetes instalados&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/etc/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; o &lt;strong&gt;overrides&lt;/strong&gt; puestos por el usuario (nosotros)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para añadir nuevas directivas (&lt;strong&gt;overrides&lt;/strong&gt;) a una &lt;strong&gt;unit&lt;/strong&gt; sin reescribirla entera, basta con crear una carpeta con su mismo nombre, concatenando &lt;strong&gt;.d&lt;/strong&gt;. Dentro podemos poner tantos ficheros &lt;em&gt;.conf&lt;/em&gt; como creamos necesarios, añadiendo las directivas que queramos añadir o modificar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /etc/systemd/system/nginx.service.d
root@server:~# cat /etc/systemd/system/nginx.service.d/autorestart.conf
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always
&lt;span class="nv"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, se ha indicado que queremos un &lt;strong&gt;restart&lt;/strong&gt; siempre, sean cuales sean las circunstancias en las que se cayó el proceso, y que espere 1 segundo antes de intentarlo. Por como está hecho &lt;em&gt;systemd&lt;/em&gt;, &lt;strong&gt;no&lt;/strong&gt; va a levantar un servicio que hemos parado invocando el comando &lt;em&gt;systemctl&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que los cambios en el fichero de configuración se apliquen es necesario recargar las configuraciones, indicando a &lt;em&gt;systemd&lt;/em&gt; que tienen que recargarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación&lt;/h2&gt;
&lt;p&gt;Básicamente vamos a repetir el paso de la comprobación; se localiza el proceso &lt;strong&gt;master&lt;/strong&gt; y se finaliza (por ejemplo, con un &lt;strong&gt;SIGTERM&lt;/strong&gt; normal).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;782&lt;/span&gt;  0.0  0.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2252&lt;/span&gt; pts/0    S+   11:56   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;776&lt;/span&gt;  0.0  0.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1936&lt;/span&gt; ?        Ss   11:56   0:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;777&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;778&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;779&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;780&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; 776
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;787&lt;/span&gt;  0.0  0.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   11:56   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo hay que esperar el paso de los segundos configurados, y volver a ver si el servicio está corriendo; aunque en este esperé algo menos de lo configurado; la paciencia no es una de mis virtudes...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;789&lt;/span&gt;  0.0  0.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2192&lt;/span&gt; pts/0    S+   11:56   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;791&lt;/span&gt;  0.0  0.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   11:56   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;802&lt;/span&gt;  0.0  0.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2236&lt;/span&gt; pts/0    S+   11:56   0:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;796&lt;/span&gt;  0.0  0.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1932&lt;/span&gt; ?        Ss   11:56   0:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;797&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;798&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;799&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;800&lt;/span&gt;  0.0  1.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2532&lt;/span&gt; ?        S    11:56   0:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro &lt;strong&gt;autorestart&lt;/strong&gt; para este servicio.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="nginx"></category></entry><entry><title>Liberando memoria caché</title><link href="http://www.linuxsysadmin.tk/2015/11/liberando-memoria-cache.html" rel="alternate"></link><published>2015-11-02T14:00:00+01:00</published><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2015-11-02:2015/11/liberando-memoria-cache.html</id><summary type="html">&lt;p&gt;A veces nos encontramos que nuestro sistema linux parece tener la memoria &lt;em&gt;virtual&lt;/em&gt; ocupada, cuando no tenemos nada de memoria &lt;em&gt;RSS&lt;/em&gt;; esto no es un problema, ya que por la forma de funcionar del &lt;em&gt;memory manager&lt;/em&gt; de linux, se conserva "por si acaso" y se libera cuando realmente se necesita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;       &lt;span class="m"&gt;3226&lt;/span&gt;        &lt;span class="m"&gt;632&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;114&lt;/span&gt;       2545
-/+ buffers/cache:        &lt;span class="m"&gt;566&lt;/span&gt;       3291
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       2381
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo este detalle nos puede resultar molesto y puede que queramos &lt;strong&gt;liberar&lt;/strong&gt; esa memoria de verdad, por ejemplo, para comparar memoria real ocupada por el sistema o sencillamente porque así lo queremos.&lt;/p&gt;
&lt;p&gt;En este caso no tenemos mas remedio que solicitar el &lt;em&gt;memory manager&lt;/em&gt; que la libere, escribiendo en el fichero de control habilitado para ello, de acuerdo a la &lt;a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt"&gt;documentación del &lt;em&gt;kernel&lt;/em&gt; de linux&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;drop_caches

Writing to this will cause the kernel to drop clean caches, as well as
reclaimable slab objects like dentries and inodes.  Once dropped, their
memory becomes free.

To free pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free reclaimable slab objects &lt;span class="o"&gt;(&lt;/span&gt;includes dentries and inodes&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free slab objects and pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches

This is a non-destructive operation and will not free any dirty objects.
To increase the number of objects freed by this operation, the user may run
&lt;span class="sb"&gt;`&lt;/span&gt;sync&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; prior to writing to /proc/sys/vm/drop_caches.  This will minimize the
number of dirty objects on the system and create more candidates to be
dropped.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este fichero viene por defecto con permisos de escritura solamente para el usuario &lt;strong&gt;root&lt;/strong&gt; y no se puede escribir sin el mismo. Como no queremos trabajar con el usuario &lt;strong&gt;root&lt;/strong&gt;, vamos a usar el comando &lt;em&gt;sudo&lt;/em&gt; con un usuario normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ sudo bash -c &lt;span class="s2"&gt;&amp;quot;echo 3 &amp;gt; /proc/sys/vm/drop_caches&amp;quot;&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente, podemos utilizar el comando &lt;em&gt;tee&lt;/em&gt; para realizar la misma operación, sin el envoltorio de &lt;em&gt;bash&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /proc/sys/vm/drop_caches
3
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente nuestra memoria queda vacía de todo aquello que no era indispensable para la ejecución del sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;        &lt;span class="m"&gt;752&lt;/span&gt;       &lt;span class="m"&gt;3105&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;2&lt;/span&gt;        207
-/+ buffers/cache:        &lt;span class="m"&gt;542&lt;/span&gt;       3315
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       2381
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;¡Acabamos de liberar 2 gigabytes de memoria!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: Esta operación puede afectar el rendimiento puntual del sistema, ya que en caso de volver a necesitar la información &lt;em&gt;cacheada&lt;/em&gt;, deberá volver a recargar la memoria, probablemente desde disco.&lt;/p&gt;</summary><category term="linux"></category><category term="kernel"></category><category term="memory manager"></category><category term="drop caches"></category></entry></feed>