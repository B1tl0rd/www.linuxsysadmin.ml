<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linux Sysadmin</title><link href="http://www.linuxsysadmin.tk/" rel="alternate"></link><link href="http://www.linuxsysadmin.tk/feeds/desarrollo.atom.xml" rel="self"></link><id>http://www.linuxsysadmin.tk/</id><updated>2016-04-18T08:00:00+02:00</updated><entry><title>Consultando una base de datos Oracle en python</title><link href="http://www.linuxsysadmin.tk/2016/04/consultando-una-base-de-datos-oracle-en-python.html" rel="alternate"></link><updated>2016-04-18T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.tk,2016-04-18:2016/04/consultando-una-base-de-datos-oracle-en-python.html</id><summary type="html">&lt;p&gt;El otro día estuve optimizando unos &lt;em&gt;scripts&lt;/em&gt; hechos en &lt;em&gt;bash&lt;/em&gt; que había hecho otro. Como resultado del lenguaje usado era un caos de comandos, muchos de ellos para limpiar la salida y darle la forma adecuada. Los reescribí en &lt;em&gt;python&lt;/em&gt; usando la librería &lt;strong&gt;cx_Oracle&lt;/strong&gt;, que compilé en un fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El mayor problema al que te enfrentas si intentas instalar una librería &lt;em&gt;python&lt;/em&gt; que no está en la librería estándar, es que debes usar el gestor de paquetes, previo uso del usuario &lt;strong&gt;root&lt;/strong&gt;. Y eso no siempre es posible.&lt;/p&gt;
&lt;p&gt;Así que para hacer una instalación en mi carpeta personal, me decanté por crear un &lt;strong&gt;virtualenv&lt;/strong&gt; en donde se iba a instalar una &lt;em&gt;wheel&lt;/em&gt; precompilada en una máquina similar. Lo documento para tenerlo a mano.&lt;/p&gt;
&lt;p&gt;Voy a explicar dos procedimientos: el primero es como instalar el &lt;em&gt;package&lt;/em&gt; en una máquina que tenga herramientas de compilación y como empaquetarlo en un fichero &lt;em&gt;wheel&lt;/em&gt;; el segundo consiste en instalar la &lt;em&gt;wheel&lt;/em&gt; localmente en la máquina que la va a usar, a modo de &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para seguir esta guía, necesitamos una máquina con &lt;strong&gt;Linux&lt;/strong&gt; cualquiera, que en mi caso ha sido una &lt;strong&gt;Debian Jessie&lt;/strong&gt;. Estos son los paquetes necesarios como requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unzip&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;libaio1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la máquina en donde se vaya a crear la &lt;em&gt;wheel&lt;/em&gt;, también serán necesarios los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python-dev&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionalmente, se necesita descargar el &lt;a href="https://www.oracle.com/downloads/index.html"&gt;Oracle instant client&lt;/a&gt;, concretamente el &lt;strong&gt;basic&lt;/strong&gt; y, en caso de la construcción de la &lt;em&gt;wheel&lt;/em&gt;, también el &lt;strong&gt;sdk&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# ls -1
instantclient-basic-linux-12.1.0.2.0.zip
instantclient-sdk-linux-12.1.0.2.0.zip
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Construyendo el fichero wheel&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en descomprimir el &lt;em&gt;instant client&lt;/em&gt; de Oracle, necesario para cualquier programa que intente conectarse a sus bases de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# unzip instantclient-basic-linux-12.1.0.2.0.zip
Archive:  instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle:~# unzip instantclient-sdk-linux-12.1.0.2.0.zip
Archive:  instantclient-sdk-linux-12.1.0.2.0.zip
   creating: instantclient_12_1/sdk/
   creating: instantclient_12_1/sdk/include/
  inflating: instantclient_12_1/sdk/include/oratypes.h
  inflating: instantclient_12_1/sdk/include/occi.h
  inflating: instantclient_12_1/sdk/include/ocikpr.h
  inflating: instantclient_12_1/sdk/include/odci.h
  inflating: instantclient_12_1/sdk/include/xa.h
  inflating: instantclient_12_1/sdk/include/ldap.h
  inflating: instantclient_12_1/sdk/include/oci.h
  inflating: instantclient_12_1/sdk/include/ocidfn.h
  inflating: instantclient_12_1/sdk/include/oci1.h
  inflating: instantclient_12_1/sdk/include/ort.h
  inflating: instantclient_12_1/sdk/include/ociextp.h
  inflating: instantclient_12_1/sdk/include/occiAQ.h
  inflating: instantclient_12_1/sdk/include/ori.h
  inflating: instantclient_12_1/sdk/include/nzerror.h
  inflating: instantclient_12_1/sdk/include/ocixmldb.h
  inflating: instantclient_12_1/sdk/include/ocidef.h
  inflating: instantclient_12_1/sdk/include/occiControl.h
  inflating: instantclient_12_1/sdk/include/ocidem.h
  inflating: instantclient_12_1/sdk/include/nzt.h
  inflating: instantclient_12_1/sdk/include/orid.h
  inflating: instantclient_12_1/sdk/include/ociap.h
  inflating: instantclient_12_1/sdk/include/orl.h
  inflating: instantclient_12_1/sdk/include/ocixstream.h
  inflating: instantclient_12_1/sdk/include/occiObjects.h
  inflating: instantclient_12_1/sdk/include/oci8dp.h
  inflating: instantclient_12_1/sdk/include/oro.h
  inflating: instantclient_12_1/sdk/include/occiCommon.h
  inflating: instantclient_12_1/sdk/include/ociapr.h
  inflating: instantclient_12_1/sdk/include/occiData.h
   creating: instantclient_12_1/sdk/admin/
  inflating: instantclient_12_1/sdk/admin/oraaccess.xsd
 extracting: instantclient_12_1/sdk/ottclasses.zip
   creating: instantclient_12_1/sdk/demo/
  inflating: instantclient_12_1/sdk/demo/occidemo.sql
  inflating: instantclient_12_1/sdk/demo/oraaccess.xml
  inflating: instantclient_12_1/sdk/demo/occiobj.cpp
  inflating: instantclient_12_1/sdk/demo/occidemod.sql
  inflating: instantclient_12_1/sdk/demo/occidml.cpp
  inflating: instantclient_12_1/sdk/demo/occiobj.typ
  inflating: instantclient_12_1/sdk/demo/setuporamysql.sh
  inflating: instantclient_12_1/sdk/demo/cdemo81.c
  inflating: instantclient_12_1/sdk/demo/demo.mk
  inflating: instantclient_12_1/sdk/ott
  inflating: instantclient_12_1/sdk/SDK_README
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el sistema sepa donde lo hemos descomprimido, hay que definir la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ORACLE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/instantclient_12_1/
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación de las librerías contenidas en el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; tiene un error y busca una librería llamada &lt;em&gt;libclntsh.so&lt;/em&gt;, que no se llama así en el &lt;em&gt;runtime&lt;/em&gt;. Se puede evitar el problema copiando la librería con el nuevo nombre, o mediante un enlace simbólico.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# &lt;span class="nb"&gt;cd &lt;/span&gt;instantclient_12_1/
root@oracle:~/instantclient_12_1# ln -s libclntsh.so.12.1 libclntsh.so
root@oracle:~/instantclient_12_1# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos empezar. Creamos un &lt;strong&gt;virtualenv&lt;/strong&gt; que nos va a servir como plataforma de construcción del fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# virtualenv env
New python executable in /root/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se activa el entorno virtual y se instala la librería mediante &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle:~# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip install cx_Oracle
Collecting cx-Oracle
  Using cached cx_Oracle-5.2.1.tar.gz
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: cx-Oracle
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; cx-Oracle ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/1f/38/66/b37c50906777b231a241ee02134f0ae018615519af43566269
Successfully built cx-Oracle
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar si funciona cargando el módulo, y por ejemplo, preguntando la versión del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
ImportError: libclntsh.so.12.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este es un mal resultado; nos indica que no se encuentra un fichero &lt;em&gt;.so&lt;/em&gt;. Este fichero está en &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;, pero el sistema intenta buscar en &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt;. Con modificar esta variable de entorno funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ORACLE_HOME&lt;/span&gt;:&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro error es que se queje de que no encuentra &lt;em&gt;libaio.so&lt;/em&gt;. Esto indica que os habéis saltado los requisitos y necesitáis instalarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
ImportError: libaio.so.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# apt-get install libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes NUEVOS:
  libaio1
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;1&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar 9.634 B de archivos.
Se utilizarán 13,3 kB de espacio de disco adicional después de esta operación.
...
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente obtenemos un resultado correcto, que nos indica que tenemos instalada la librería en nuestro entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos aprovechar esta compilación para máquinas con el mismo tipo de procesador y con la misma versión de &lt;strong&gt;python&lt;/strong&gt;, creando un fichero &lt;em&gt;wheel&lt;/em&gt; con la librería ya compilada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip wheel cx_Oracle
Collecting cx-Oracle
  Saved ./cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Skipping cx-Oracle, due to already being wheel.
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ese es el fichero que vamos a distribuir a los entornos de producción donde necesitemos crear &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;python&lt;/strong&gt; que se conecten a Oracle.&lt;/p&gt;
&lt;h2&gt;Instalando en otras máquinas&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que nos interesa poner el &lt;em&gt;runtime&lt;/em&gt; de Oracle y la carpeta con nuestros &lt;em&gt;scripts&lt;/em&gt; en &lt;em&gt;/opt/&lt;/em&gt;. De hecho, nada impide que se haga en una carpeta personal, en la que tengamos privilegios completos.&lt;/p&gt;
&lt;p&gt;También vamos a necesitar un &lt;em&gt;instant client&lt;/em&gt; para poder funcionar, aunque esta vez no se necesitan enlaces simbólicos ni declarar la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;. Lo descargamos en su localización deseada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle2:/opt# unzip /root/instantclient-basic-linux-12.1.0.2.0.zip
Archive:  /root/instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las dependencias deberían estar ya instaladas, pero en mi caso no lo estaban. Las instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle2:/opt# apt-get install python libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python-minimal python2.7 python2.7-minimal
Paquetes sugeridos:
  python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  file libaio1 libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python python-minimal python2.7 python2.7-minimal
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;14&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar 5.020 kB de archivos.
Se utilizarán 21,3 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...  
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos la carpeta que va a contener el entorno virtual y los &lt;em&gt;scripts&lt;/em&gt;, y creamos en ella el entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle2:/opt# mkdir scripts
root@oracle2:/opt# &lt;span class="nb"&gt;cd &lt;/span&gt;scripts/
root@oracle2:/opt/scripts# virtualenv env
New python executable in /opt/scripts/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el entorno virtual y le instalamos el fichero &lt;em&gt;wheel&lt;/em&gt;, que habremos copiado en algún sitio. Este fichero es local a la máquina, y no se consulta el repositorio de &lt;strong&gt;python&lt;/strong&gt; remoto para nada. De hecho, un &lt;em&gt;wheel&lt;/em&gt; es un fichero &lt;em&gt;.zip&lt;/em&gt; normal, que se descomprime en la carpeta adecuada del &lt;strong&gt;virtualenv&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@oracle2:/opt/scripts# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# pip install /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Processing /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probamos que funcione; es importante definir la variable de entorno &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; para que encuentre el &lt;em&gt;runtime&lt;/em&gt; de Oracle. Es muy útil ponerlo en el fichero &lt;em&gt;~/.bashrc&lt;/em&gt; para que se cargue solo al abrir el &lt;em&gt;shell&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opcionalmente, podemos reducir la cantidad de librerías que conforman el &lt;em&gt;instant client&lt;/em&gt;, ya que solo se necesitan 4, y reduce su tamaño de forma dramática.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
169M    /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; es un fichero &lt;em&gt;.so&lt;/em&gt; y que este requiere de los otros 4 en el &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(env) root@oracle2:/opt/scripts# find env/ -name &amp;quot;*.so&amp;quot;
env/lib/python2.7/site-packages/cx_Oracle.so
(env) root@oracle2:/opt/scripts# ldd env/lib/python2.7/site-packages/cx_Oracle.so | grep instant
        libclntsh.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntsh.so.12.1 (0xb5387000)
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4d9d000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4d69000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4a90000)
(env) root@oracle2:/opt/scripts# ldd /opt/instantclient_12_1/lib{clntsh,nnz,ons}* | grep instant
/opt/instantclient_12_1/libclntshcore.so.12.1:
/opt/instantclient_12_1/libclntsh.so.12.1:
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4f8c000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4f58000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4aec000)
/opt/instantclient_12_1/libnnz12.so:
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb7115000)
/opt/instantclient_12_1/libons.so:
(env) root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que significa que debería ser seguro eliminar el resto. Así que lo hacemos. Guardad una copia de seguridad antes de eliminar nada.&lt;/p&gt;
&lt;p&gt;Tras eliminar lo que no nos sirve, la carpeta queda así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# tree /opt/instantclient_12_1/
/opt/instantclient_12_1/
├── libclntshcore.so.12.1
├── libclntsh.so.12.1
├── libnnz12.so
└── libons.so

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
55M     /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No está nada mal; hemos pasado de 169mb a 55mb. Comprobamos que sigue funcionando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y parece correcto.&lt;/p&gt;
&lt;h2&gt;Uso del package cx_Oracle&lt;/h2&gt;
&lt;p&gt;En este punto hay que seguir la documentación del módulo, que no es muy diferente de otras bases de datos; &lt;strong&gt;cx_Oracle&lt;/strong&gt; sigue la misma especificación para todos los módulos de bases de datos.&lt;/p&gt;
&lt;p&gt;La idea es que se crea un objeto &lt;strong&gt;conexión&lt;/strong&gt;, del que se saca un &lt;strong&gt;cursor&lt;/strong&gt; para cada consulta que queramos ejecutar, y que se itera para obtener las &lt;strong&gt;filas&lt;/strong&gt;. Pongamos un ejemplo simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# cat list_fruits.py
&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

import cx_Oracle

&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_host&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_port&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_sid&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_service_name&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nobody&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;dsn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.makedsn&lt;span class="o"&gt;(&lt;/span&gt;HOST, PORT, SID, SERVICE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER, &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PASSWORD, &lt;span class="nv"&gt;dsn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dsn&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;select name, price from fruits&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; connection.cursor&lt;span class="o"&gt;()&lt;/span&gt;
cursor.execute&lt;span class="o"&gt;(&lt;/span&gt;query&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; row in cursor:
    print &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;row&lt;span class="o"&gt;)&lt;/span&gt;
cursor.close&lt;span class="o"&gt;()&lt;/span&gt;

connection.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos como cualquier otro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# ./list_fruits.py
Apple&lt;span class="p"&gt;;&lt;/span&gt;0.99
Orange&lt;span class="p"&gt;;&lt;/span&gt;0.89
Pear&lt;span class="p"&gt;;&lt;/span&gt;1.19
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y obtenemos los datos deseados, con la facilidad que nos aporta &lt;strong&gt;python&lt;/strong&gt; para dar formato fácil a la salida de nuestros &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="python"></category><category term="oracle"></category><category term="script"></category><category term="virtualenv"></category><category term="wheel"></category></entry></feed>